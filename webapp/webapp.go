// Code generated by go-bindata. DO NOT EDIT.
// sources:
// build/asset-manifest.json (779B)
// build/favicon.ico (3.87kB)
// build/index.html (2.151kB)
// build/manifest.json (306B)
// build/precache-manifest.3e43d18400d8b742ae2556b675d737d2.js (606B)
// build/service-worker.js (1.041kB)

package webapp

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xd1\x72\xab\x20\x10\x86\xef\xf3\x14\x8e\xd7\x27\x68\x40\xc0\xd3\xb7\x41\x76\x8d\x98\xa0\x19\x20\x69\x67\x3a\xed\xb3\x77\x86\xa6\x8a\xa9\x69\x3a\xbd\x74\xf7\xfb\xfe\x75\x77\x78\xdd\x64\x59\x6e\x95\x19\x88\xf6\x3e\x7f\xca\xf2\xc2\x07\x15\x8c\x2e\xb4\xf7\x45\xac\x33\x26\x69\xa3\x44\x49\x74\x77\x1e\x0e\x11\xfb\x37\x49\xfd\xc2\xe9\xaf\x8a\x94\x6d\x55\x8b\x12\xae\x4a\xbf\x34\x88\x55\xa7\x5f\x59\x11\x8c\xa6\x3b\x0f\xc1\x58\x7c\x5f\x9f\xb9\xe8\x6a\xce\xab\x1d\x13\x7c\x9a\x7a\xe3\xae\x4c\xbf\xe7\xcf\xf3\x67\x96\x12\xca\x6a\x68\x1b\x41\xe7\xe5\x96\x69\x6b\xc4\xe3\x90\x95\xdf\xba\x47\xc5\x30\x33\x00\xbe\x90\x2e\xd8\x63\xb4\x92\xcf\xd8\x3e\x39\xd4\x4a\x77\xb8\xb5\x6a\x30\x2d\xfa\x40\x18\x56\x0c\x76\x75\x55\x96\x50\x37\xb2\xa2\x0a\x29\xe7\xa2\x11\x92\x83\x64\x12\xe8\xd7\x22\x7f\x33\x3f\x17\x44\x77\x31\x1a\xb7\xcf\xa3\x3b\xa0\x9b\x2e\xf3\xad\x9a\x5e\xe3\x87\x67\x76\x7b\x92\x47\x68\x1a\x6b\x11\x8c\x2a\x8e\xe3\x7e\x24\xfe\xb2\x4f\x53\x92\x0e\x07\x0e\xff\x11\xdb\x88\x6c\xde\x3e\x02\x00\x00\xff\xff\x4b\x0f\x5e\xd3\x0b\x03\x00\x00")

func assetManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetManifestJson,
		"asset-manifest.json",
	)
}

func assetManifestJson() (*asset, error) {
	bytes, err := assetManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "asset-manifest.json", size: 779, mode: os.FileMode(436), modTime: time.Unix(1554958814, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0xee, 0xc5, 0xe7, 0xa1, 0x41, 0xd6, 0x8e, 0xa2, 0x85, 0xf2, 0x45, 0x7d, 0xdc, 0x20, 0x63, 0x34, 0x22, 0x30, 0x2a, 0x53, 0x3f, 0x84, 0xb2, 0xd7, 0x4a, 0xfe, 0x9d, 0x48, 0x93, 0xb8, 0xaf}}
	return a, nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x67\x50\x13\xe8\xbb\xc5\x5f\x3a\x2a\x28\xee\x2a\xd6\xdd\x45\x52\x08\xa4\x10\x7a\x09\x21\x1d\x08\x04\x08\x21\x84\x10\x42\x42\x94\x22\xab\x80\xac\x80\x22\x52\x55\x02\x28\x4d\x40\x8a\x62\xa1\x17\x05\xe9\x52\xa4\x28\x08\x22\xbd\x0b\xa2\x22\x2c\x58\xa8\x8a\x8a\xfd\x0e\xeb\xfd\x70\x67\xee\xff\xce\xce\x7d\xe6\x3d\xf3\xce\xf3\xf9\x9c\xdf\x79\x00\x90\x00\xd2\x40\x49\x69\xe3\x57\x01\x33\x12\x00\x98\x01\x00\x76\xef\xfe\xb9\x2b\x48\x01\xa0\x2e\x09\x80\x8a\xca\xcf\xdd\x48\x0a\x00\x3d\x19\x00\x88\xc4\x9f\xfb\x6d\x59\x00\x7c\xe4\x01\x88\x61\xda\x98\x2b\x6e\xde\xbb\x19\x00\xa0\x48\xb7\xa0\xb2\x00\x00\x4a\x1b\x92\x97\x02\x00\x20\xd0\xdb\xec\x01\x00\xb3\x4c\x06\x9b\xa6\xfa\xbf\x46\x9b\xc9\xc5\xff\x15\xae\x6e\x80\xd3\x30\x36\xb5\x48\xcc\x45\x93\xcd\x69\xd1\x99\x86\x6e\xbe\x7a\xdc\x83\xfa\xce\xee\x56\x19\xa5\x56\x99\x65\x5a\xd6\x0e\x46\x9e\xc7\x75\xec\xf9\xf4\xe4\x02\x63\x4f\x7f\x35\xac\x0e\x31\xf8\x3c\xa7\x6e\x98\x5d\xd5\x47\x0a\x89\xe3\x34\x8c\x12\x83\x62\xf4\xf9\x1e\x16\x17\xf3\xd1\x14\x3a\x3d\xa5\x90\x16\x7d\x19\x89\x23\x1a\x08\xbd\x0c\x84\x7f\x9a\xc5\x66\x59\x5e\x2a\xb1\xba\x7c\xdb\x22\x31\x07\x4d\xb6\x10\x4d\x7c\x41\x11\xcd\x28\x67\x52\x18\x59\x95\x70\x0c\xd6\xf1\xee\x63\x9b\x9c\x7a\x7a\x72\x21\x54\x1d\x49\x8e\x48\xb2\x4c\x2d\x66\x95\x75\x12\x02\xa3\x4c\x8f\x47\x98\x06\x9c\xb5\x2f\xef\xc2\xfb\x85\x31\x8b\x5a\x99\x85\x2d\xcc\x82\x66\x14\x81\xaa\xeb\x20\x80\x21\xd1\xd6\xd7\x6b\xac\xd2\x4b\x61\x48\x94\xb6\x2d\x17\x69\x42\x62\x5c\xa9\x80\xc0\xe1\xd4\xa8\x74\x18\x0a\x43\x4f\x2d\x0a\x5c\x63\x7f\x00\x00\xc8\xf8\xb3\x6c\xec\xe9\x73\xf3\x96\xb3\xee\x2d\xee\xf9\x00\x80\x22\x3a\x95\xc4\x3e\x29\x61\x1d\x5f\xcd\xa3\x91\x14\xce\xfe\x78\x5c\xb9\x69\x69\x09\xc6\xba\xb1\xfc\x6c\x9a\xcd\x3e\xdc\x61\x7e\xae\x01\xd5\x5a\xda\x8e\x97\xaa\x50\x1e\x0c\x5b\xf2\x5e\xf4\x58\xf4\xf6\xf1\xb8\x48\xba\x04\x7d\x21\x36\x3d\x20\x95\xef\x59\xbf\x66\xe1\x79\x37\x91\xf6\x2c\xe1\x49\x75\x88\xe4\x26\xd9\xa9\x86\x6f\xe2\xfa\xc6\x23\x4a\x6e\xbf\x7e\x2e\x28\xb3\xf4\xdd\x9e\x96\xd1\xab\x33\xc7\x50\xb5\xac\xbb\x7e\xb9\x7b\xe4\xab\x9d\x18\xfa\x62\xbe\xad\xf1\x0f\x0f\x8f\x6a\xd4\xab\x70\x3d\x2f\x23\xc9\x3d\xdd\xd7\xca\x2c\x0a\xf7\x6b\x7a\x93\x25\xa3\xc4\x27\x7a\x9e\x9c\xc0\x51\x15\xc7\x91\xf0\x48\xc7\x92\x9d\xc5\x75\x85\xd4\x35\xdf\x1d\xc4\xae\x2a\x16\xbd\xa8\x9f\x7c\xc3\xd7\x7b\x2f\x46\x6e\xb2\x52\xae\x05\x00\x00\xe8\x34\x1b\x6a\x29\xd9\x35\xf2\x3f\x58\xbc\x7b\x43\xff\x58\x3c\x56\xd4\xd3\x05\x80\x84\xfb\x7f\xb6\xf8\xbf\x8d\x66\xf1\x6c\xb2\xeb\x2c\x2f\x95\xe8\xb0\x9c\x2d\xd3\x6e\xaa\xeb\x19\x39\xb5\x3e\xc5\x5a\xd9\xeb\x3a\xba\xda\x95\xb4\x31\xae\x54\xc0\x90\x68\xac\x25\x4b\x5d\xdf\xd8\xd8\xd3\x9f\x12\x99\xac\x0a\x81\x10\x02\xa3\x1c\x6a\x07\x08\x27\xa2\x4c\x7c\x82\xe1\x68\x4d\xa7\x7b\xcf\xf0\x7e\x61\xc6\x5e\x01\xe4\xb0\x44\x52\x48\x1c\x29\xf8\x02\x39\x22\x49\x93\xce\x64\x16\x34\xe3\xfd\xc2\xad\x32\x4a\x85\xc3\xef\x18\x59\x95\x50\x84\x3a\xee\xe8\x29\x56\xd9\x43\xd1\xc4\x17\x7a\x72\x21\xef\xc1\x8c\x8e\x83\x40\xcb\xda\x41\x87\xed\xc2\x6b\x7f\x41\x4f\x2e\xe0\x36\x3f\x31\x3b\x7f\x15\x4d\x36\x67\x16\xb6\xe8\x3b\xbb\xa3\x88\x34\x3d\x9e\x9b\x6d\x41\x33\x9a\x6c\xc1\x6d\x9e\x44\xe2\x49\x8e\x4d\x13\x28\xa2\x99\x63\xe3\xb8\x5d\xf1\x7d\x42\xe0\x39\xc7\xc6\x31\xa4\x09\x89\x18\x14\xad\x0a\x81\xf2\xbb\x5f\xeb\x3a\x8a\xf8\xdd\x6f\xec\x2b\xba\xa1\x08\x0d\x0c\x8d\x21\x18\x58\xe5\xd4\x8f\xe8\xbb\x1c\x86\x40\x61\xe6\xf1\x37\x20\x70\x35\xdc\x9f\x27\x38\x75\xc3\x68\x0a\x9d\x71\xb9\x9c\xd7\x36\x2d\xe8\x5f\xde\xc8\xd2\xed\x2e\x4d\x0b\x1b\xeb\xeb\xb5\xc2\x91\xf7\xfc\x47\xaf\xac\xaf\xd7\x18\xba\xf9\x52\xcf\xa5\x51\xa3\xd2\x4d\xfd\xcf\x20\xf1\x64\xe7\xce\x39\x94\x29\xc5\xd4\x3f\xd2\xc4\x37\x84\x18\x14\x83\x65\xd8\x63\x68\x56\xec\xaa\x5e\xa8\x1a\x02\x86\xc2\x90\x42\xe3\x1d\xef\x3e\xa6\x44\x5c\x84\x21\x51\xfc\xae\x97\x94\x03\xb3\xbf\x01\x00\xe4\x36\x32\x26\x9b\xb4\xb8\x94\x18\x1d\x73\xc5\xbc\x69\x14\x00\x09\xdb\x9f\x29\x3b\x1a\x73\x9f\x5c\x63\xb7\xe3\xdc\xb5\x80\xaa\x67\xc2\xce\x4a\x93\x47\xca\xf9\x53\x81\xfb\xdd\xe3\x5e\xcb\x56\xc4\xbd\x13\x29\xeb\x2b\x93\x7a\x9b\x2e\xec\x92\xfe\x12\x98\x1d\x2c\x47\xec\x95\x03\x34\x35\xf0\xd4\x0d\xd0\x47\x0e\xcc\xef\xbf\xba\xb8\x57\x05\xac\x50\xd2\x86\xd9\xe7\xb7\x7c\xf7\x04\xfb\x81\xd6\x3d\x1a\xa2\x4f\x66\xc7\xaa\xbd\xdd\xf1\xbd\x2f\xbc\x14\xdb\x12\xce\xf1\x7e\xd4\x2a\x73\x64\xeb\xb6\x00\xc9\x7e\xf5\x57\x9e\x07\x62\x8a\x0f\xf7\x7e\x52\x92\xf4\x97\x79\x55\x8f\xf6\x0a\x49\xaf\xde\x5e\x6d\x32\x42\xd8\x59\x93\x70\x94\xcc\x13\xb5\x55\xe9\x06\x53\x87\x5e\x5c\x68\x10\xba\x1b\xe6\x05\x75\x44\xdc\x6a\xf9\x43\xe7\xaa\xfa\xb5\x3c\xc2\x6d\x0f\x9c\x21\x66\x66\x7f\xae\x7f\x37\xfe\x6f\xdc\xd6\x4d\xc6\x33\x7a\xda\x1e\x61\x56\xbc\x85\xb0\xa3\xbf\x7c\x2a\x1c\xcf\xec\x31\xc2\x5c\x85\x9c\x19\x94\x24\xb5\xfa\x75\x7f\x9e\x54\x96\xfd\xa3\x34\x87\xf3\x23\xc2\x15\x2f\x25\x05\xbd\x79\x8f\x20\xac\x69\x2a\x95\x19\xf6\xb3\x9e\x4f\xc4\x2c\x5b\x42\xb7\x6d\x26\x08\xfc\x3e\xae\x2e\x4e\x26\x2c\x63\x42\x50\x91\x0b\xc7\xe7\xa6\x14\x14\x84\x6c\x7f\xff\xe1\x26\xb0\x53\x0b\x22\x17\xa3\x89\x58\x48\x43\x3b\xcb\xfe\x12\xf1\xd2\x35\xe2\xa5\x6b\xb7\xf4\xc4\x72\xfb\x0a\xef\x0f\x37\xbd\x8b\xf1\x19\x97\x09\xbd\xee\x07\x79\xcd\x4f\xa3\xbd\x30\x93\x73\x19\x0a\x4a\x7b\x16\xfc\x7a\xcf\x22\xb5\x6e\x4b\x84\xdc\xbb\xa0\xf7\x09\x80\xe5\x79\xb7\x42\xf3\xd4\xbe\xf5\x7f\x61\x41\x65\x43\xff\xb0\x40\xcd\x8d\x7d\x00\x80\x04\x69\x83\x05\x00\xc0\xff\x85\xc3\x4f\x22\x38\xf5\xa3\xc2\xe1\x35\x87\xda\x01\xfc\x5f\xe1\x50\x84\xba\x9a\xb6\x9e\x4b\xef\x22\xe5\x4c\x2a\x96\x61\x6f\xe2\x1b\xc2\x6d\x79\xc2\x6d\x9e\xc4\x5a\xda\xe1\x8f\x85\x52\xcf\x5e\x32\xf1\x09\xe6\xd4\x8f\xd0\xc4\x19\x86\x6e\xbe\xc2\xe1\x77\xb4\xe8\x4c\xb3\xf3\x57\x2d\x92\xf2\x8c\xdc\x8e\x09\x47\xde\x5b\x24\xe6\xd2\x93\x0b\xcd\x2e\x5c\xd3\x77\x76\x77\x1d\xfd\xe8\x3a\xb6\xce\xc8\xaa\xd4\x34\xb7\x16\x0e\xbd\x75\xb8\x33\xa4\x86\xd5\x66\x16\xb5\x6e\xc0\x52\x7c\x8f\xdb\xfc\x04\xae\xa9\x85\x3b\x1a\xa4\xc3\x72\x76\x1d\x5f\x37\x8f\xbf\xc1\xae\xec\xe1\x77\xbf\x16\x4d\x7c\xd1\xb2\x75\x54\x85\x40\xec\x4a\xda\x44\x8f\x3f\xb3\x4a\x3b\xf0\x7e\xe1\xae\xa3\x1f\x30\x34\x06\x12\x4f\x62\x57\xf7\xa3\x29\x74\xab\xf4\x52\x08\x5c\x8d\x12\x99\x2c\xe8\x5f\xa6\xa7\x14\xc2\x31\x58\x5d\x07\x81\x60\x60\x85\x18\x14\xcd\xeb\x98\x85\x22\x34\x9c\x1f\xce\x0b\x06\x56\x51\x04\x2a\xab\xec\xa1\x2a\x04\xaa\x65\xc3\xd1\xb2\x66\x53\xcf\xa5\x99\x06\x9c\xc5\x1d\x39\x69\x1e\x77\x9d\x55\xd6\xa9\x69\x61\x03\x47\x6b\x12\x83\x62\x36\x6a\xd6\x3f\x92\x78\x2a\xd6\xa5\x67\x81\x59\xd8\x02\x55\x43\x50\xa3\xd2\x5c\xfa\x96\x4c\x7c\x4e\x63\x2d\x59\x0e\xb5\x83\x5b\xc7\xf8\x8d\x00\x80\x4d\x1b\x39\x07\xb0\x5b\xab\x6a\xcb\xef\x10\x6f\x43\x07\xa6\x5e\x02\x20\x71\xf5\x67\xd2\xe3\x92\xa5\x32\x29\x5a\x3b\xcc\x84\x53\xcd\xd6\xde\x93\x35\xba\x35\xde\xc1\x3f\xb6\xa4\xe7\xfa\x44\xcd\x4f\x0f\x6d\x2a\x95\x26\x41\x2f\x3d\x97\x83\x1e\x4c\x52\xb1\x70\x5f\x97\xc9\x60\x2b\xcd\x38\xb6\xdd\x3b\x1c\x96\x9a\x79\xb8\xca\x98\xe9\xcf\x53\xb4\x2b\xc1\x12\x31\xae\xe1\x4f\x5d\x75\x33\xd0\x9c\x7d\xae\x95\xbc\x05\xb8\x98\x94\x20\x01\x69\x7d\x75\xf0\xc8\x54\xdb\xcc\xea\xe7\x71\x53\x8c\x9a\xda\xba\x94\xab\x34\x05\x2a\x6f\x36\xde\xb7\x29\x09\xb1\xbb\xfc\xa4\xaa\x3e\x57\x69\x5a\xfa\xd0\x2f\x29\xec\x89\x57\x8c\x02\x22\x7d\xef\x27\x9c\x1b\x70\x43\xd7\x9d\x6e\x62\xa2\x24\x3a\x53\x8c\x6e\xb0\x6e\x8d\xec\xeb\xf1\xd0\xd9\x91\xdd\x6c\x76\x97\xe3\x6d\xbd\x65\x91\x5b\x30\xb1\xd8\xb3\x67\x7e\x17\xd1\x29\xdd\xa0\xf7\x7d\xfd\x88\xcd\x4d\xfc\x2f\xca\x69\x0a\xf1\x7f\x77\x76\x15\x07\x28\x86\x8c\xde\x2c\x41\x26\xb9\x8b\x45\x5e\x7e\x2a\xb9\xa3\x06\xfa\x11\xb7\x16\xb3\xa6\xf0\x87\x15\xbf\xf0\x16\x16\x97\xf6\x1f\x95\xb8\xbc\xef\x8d\x38\x64\xba\x50\xb6\xab\x3c\xcf\xd9\xac\x84\x6e\x44\xaa\x3b\x62\x24\x9b\x37\xfa\x66\xcb\xec\x8e\x0b\x3a\xd9\xf7\x8d\x7e\xed\xbd\xf1\xee\x6a\x84\x1f\x39\x74\x7c\xfa\xe0\x9d\xfb\x7f\x3b\x08\xef\x08\x12\x9e\x00\x67\xb9\xda\xb5\xad\x27\xa2\xbe\x05\x9f\x12\xcb\x05\x8a\xf7\x9d\x12\x3f\x46\xc4\xe6\x6c\xbc\xef\x97\xe5\xa2\x62\x3d\xde\xfa\xa5\x3c\x34\xbf\xf4\x70\xf9\xc8\x6a\x4a\xdf\x7c\xac\x53\x93\xf2\x8f\x62\x8f\xd9\xb7\x1d\xa1\xcf\x8d\x35\x74\x87\xec\xf8\xb6\xa6\xd7\x92\xae\x8b\x1b\x4d\xc2\xc6\x92\x3f\x3b\xe6\xbc\xea\xe1\x9d\x96\x7b\x7a\xbe\xdd\x20\x79\x35\x75\xf9\x4f\xf6\xf0\xec\x8c\xcf\xb6\x94\xbb\x0d\xdb\xb2\x4b\x5d\xa1\x16\x2b\xc8\xb7\xcd\xe6\xb6\xab\x5f\x56\x34\x5e\x9e\x3c\x9f\xba\x2e\x91\xc7\xd5\x38\x2d\x99\xb2\x5b\xf0\x43\x66\x9b\xdb\xb6\x7f\x01\x87\xb8\xa1\x7f\xc0\xc9\xaa\x8d\x58\x00\x40\xd2\xf8\xdf\xc1\xf9\xff\x0e\x0c\x89\x26\x06\xc5\x38\x36\x8e\xb9\x8e\xad\x0b\x06\x56\xed\x2b\xba\x29\x91\xc9\x28\x53\x8a\x86\xa1\x09\xb7\x75\x4a\x34\xf1\x45\xf4\xf8\x93\xf5\xb5\x6a\xa4\x09\x49\xf4\xf8\x33\xb7\xe5\x09\x04\x06\x63\x57\xf7\x33\xae\x56\xe1\xfd\xc2\x4c\x03\xce\x5a\x5d\xbe\xed\x3a\xfa\x81\x14\x12\xc7\xb8\x5c\x6e\xe8\xe6\x8b\xff\x2b\x1c\x86\x44\x11\x83\xa2\x05\xfd\xcb\xf6\x15\x8f\xd4\xf5\x8c\xf0\x7e\xe1\xcc\xa2\x56\x87\xda\x41\x55\x08\x94\x59\x7c\x8f\xdf\xf5\x12\x6b\x69\x67\x57\x7c\x5f\x15\x02\x71\xa8\x1d\x80\xc0\xe1\xc2\xe1\x35\x53\xff\x48\xd3\xe3\x11\xae\xe3\xeb\xc2\xe1\x77\x7a\x4e\x87\xb4\x6c\x1d\xf5\x78\x6e\x5a\x36\x1c\x24\x9e\xac\x65\xed\x80\xc4\x11\x35\xcd\xad\xf9\xdd\xaf\x35\x70\x04\x1d\x7b\xbe\xba\xa1\x89\x36\x8b\x27\x1c\x79\x8f\xc4\x93\x5c\xfa\x96\x50\x44\x33\x14\x91\x06\x47\x6b\x62\xad\xec\x0d\x44\x47\x6d\xf3\x9b\x8c\xdc\x8e\x19\x8a\xbc\xc9\xa1\x09\xb4\xe8\x4c\x66\x61\x8b\x4d\x76\x9d\x1a\x56\x5b\x87\xed\xe2\xd2\xbb\x48\x38\x29\xd6\x71\x10\x50\xce\xa4\xea\xf3\x3d\x1d\xee\x0c\xc1\x31\x58\xea\xd9\x4b\x06\x42\x2f\xd6\xad\x07\x16\x49\x79\xf4\x94\x42\xeb\xeb\x35\x50\x84\x06\x21\xf0\x1c\xef\xc1\x0c\xb7\xf9\x09\x9a\x64\x0e\x81\xc2\x9c\x1f\xce\x1b\x1e\xf2\x75\xee\x9c\xfb\x79\x65\xd4\xb4\xf5\x08\x81\x51\x86\x07\x7d\x60\x1a\x48\xc6\x95\x0a\x9b\x9c\x7a\x6d\x26\x57\xdd\x00\x87\x3f\x16\x8a\xd0\x33\x14\x0c\xbe\x65\x16\x34\xeb\x3a\x8a\xec\x4a\xda\xd8\x55\x7d\x58\x4b\x96\xdd\xcd\x76\x76\x55\x2f\x3d\xb9\x50\xdf\xe5\x30\xab\xec\x21\xbb\xb2\x07\xcb\xb0\x37\x3b\x9f\x65\xe4\xee\x47\x8b\xbe\x4c\x8b\xb9\x62\xe4\x79\xdc\x2c\x36\x8b\x72\x26\x05\x02\x57\xe3\x3f\x7a\xe5\x3a\xfa\x11\xae\xa9\xa5\xcf\xf7\x20\x47\x24\x91\x82\x2f\xb0\x4a\x3b\x5c\x7a\x16\x10\xba\x06\x30\x14\x46\xc3\xd8\x54\xc3\x08\x6f\xe4\xf1\x97\xb1\xa7\xbf\x81\xc0\xcb\xa1\xa6\x9f\x70\x22\x8a\xd7\x31\xcb\x6d\x9e\x14\x0c\xac\xd8\xdd\x6a\xb7\x48\xcc\x51\xd7\x37\xe6\xd4\x0d\xab\x61\x75\x74\x1d\x04\x34\x71\x06\x86\xc6\xc0\x98\x59\x5b\x65\x94\x12\x4f\xc5\xda\x8f\xed\xdf\x0a\x00\xd8\xf3\x4f\x63\x68\xc4\x8f\xad\x8f\xca\xa6\x7c\x4b\xdf\xd4\x70\x37\x15\xf9\x35\xe1\xd3\xbb\xe1\x44\xd4\xf8\xe7\xb5\x16\x3c\x27\x01\x00\x69\x85\x9f\x0d\x92\xfb\xa8\x5a\x82\x72\x00\x48\xf7\x2f\xc7\x5e\x12\x53\x4e\xff\x90\x99\x99\x90\x11\x04\xb1\x5c\x46\xac\x27\xa7\x6d\x5d\x9e\x0d\x8f\x4c\x61\x6d\x3a\xb5\x7b\x1e\x2d\x36\xab\xee\xdb\x53\x5c\x9c\x8d\xc0\x72\x76\xce\x20\x5a\x9c\x60\x4c\x2a\x1b\x1d\x8a\xf0\xbe\xf9\xee\xc0\x0b\x2b\x85\xa7\x4e\x39\x3b\x43\xab\x52\xbf\xd2\x07\x3d\x82\x2b\x27\xff\x78\x3a\x2d\x0a\x6b\x2c\x28\x58\xd3\x49\x1b\xb1\x3d\x06\x4f\xd9\xdf\x9f\x1b\x73\x03\x9c\x8c\xff\x08\xb9\xf6\xe7\xad\xb5\x89\x1a\xef\x38\xef\x57\x6f\x0f\xa9\xbb\x78\xe7\x5e\x14\x3f\x54\x7f\x50\xe0\xe9\x31\xbf\xe3\xf0\x91\x8a\xd5\xde\xc1\xeb\x73\x9e\x9e\xf9\x1d\x19\x99\x0b\x7b\xfa\x91\xdc\xf0\xf6\xd7\x01\x5e\x41\x32\x9c\xb1\xe2\xda\x23\x25\xb7\x2b\xf8\xce\x5f\x8d\x51\xe3\xf2\xfa\xe3\x4f\xfe\x6c\xab\x50\xc4\x35\xa8\x36\xe0\x6e\x8f\x71\x3f\x7d\x97\x98\xf4\x68\x9d\xde\xde\xd1\xf3\xe5\x5b\xb2\x7d\x6f\x6f\x5f\x9f\x21\xfe\xa9\x6f\x13\x6e\xee\x65\x3f\x62\xf7\x99\xf3\x1f\x86\xf2\xc8\x47\x86\xdd\xbf\xf4\xec\xe4\xef\x93\x31\x38\x86\xf4\x5e\x5a\x9a\xfe\x6e\x33\x61\xd2\x12\x67\xb7\x22\x6f\x3b\x38\xf7\x49\x66\xad\xb2\x2a\x28\xd2\xb3\x61\xa7\xbf\x7f\xff\x9b\x7d\xbe\xa9\xdf\xee\xe6\x5c\x5b\xe0\xac\x48\x34\x0c\xce\x1e\x97\xfc\xf6\xf5\x66\xc6\x7a\x0a\x5c\xb8\x22\xda\xf1\x35\x62\x99\xb3\x33\xf4\x79\xed\xe8\x1e\xc2\x2d\x0d\xc3\xe7\x09\x76\x2a\x38\xc3\xbc\x56\xd4\x9d\xdc\xc8\x2d\x1e\x79\x11\xc9\xbf\x69\x6d\x79\x72\x32\x37\x6a\xac\x60\xf5\x9a\xb4\xc6\x95\xf5\x01\x52\xd9\xf0\xca\x6d\x11\x44\xbe\xbc\x52\xb9\x26\x1f\x12\xeb\xc3\x4c\xf2\x42\x36\xd6\x50\x3a\x51\xd1\x0f\x5e\xce\xf6\x08\xa7\xe3\x6c\x0e\x0e\x4c\x47\xde\xbf\x33\x2f\x03\x52\x2d\xe2\xc9\x1a\x13\x83\xf9\x2a\x59\x0c\x04\x10\x98\xac\xde\x8f\x88\x64\xe8\xcb\x1d\xb3\x6c\x62\xa6\x3c\x94\xcf\x8b\x2f\xca\x86\xa9\x26\xb3\x50\xb3\x46\x32\x9d\xee\x3a\xee\xac\x47\x22\xad\x44\xc4\xe6\xec\x67\x7e\x1d\x86\x8f\xe3\xab\x62\xbd\xad\x1e\x95\x7b\x3f\xa8\xf1\x9e\xfc\x5a\x1b\xe4\x75\xe0\xe5\xd6\xde\x62\xa7\xbe\x80\x37\xd7\x5b\xfa\x84\x2d\xcb\x04\xaf\x8f\xd1\xdf\x90\x6f\xb7\xc5\xb6\x91\xb6\x9f\x56\xfe\x14\x9c\x94\x5e\x45\x68\x8e\x10\xd2\x7c\x24\xd4\x31\x12\x96\x8f\xa8\xb9\x26\xe1\x9b\x8b\x6e\x66\xf3\xf8\xec\xe3\x45\x2c\x0d\x79\xc4\xae\x4d\x65\x45\x32\x96\xb1\x59\x92\xe7\x02\x94\xb8\x9a\x7b\x15\x75\x2d\x7f\x35\xca\xbc\xa1\x57\x4b\xa5\x55\xeb\x1e\xe9\xd0\x15\xc3\xbd\xf2\x38\xba\x13\x92\x37\x4a\xfb\x95\xe5\xcb\xa2\x02\x8f\x7b\x18\x3f\xf7\x44\x65\x65\xbf\x24\x53\x1a\x96\xa0\x35\xf2\xf5\x3d\x9f\x96\x22\xc4\xd3\x97\x88\xdb\xd7\x62\xe9\x42\x82\x94\xc9\x6f\x3b\x92\x0e\x28\x08\x62\x3b\x9f\x0f\xdd\xed\xf8\x30\xfb\x9e\x9c\x04\x53\x62\x3c\x3f\x51\xbe\x5b\xd6\x8c\xaa\x15\xdb\x5a\x88\x30\x0b\xff\xbd\x7c\xfd\x77\x8b\x74\x18\xf6\x81\x54\xf9\x9e\xe6\xf6\xf1\xb3\x88\x6c\x6c\xf4\x2f\xed\x6d\xbb\x77\xa9\xb5\xcf\x49\xa4\xd9\x60\xb0\x01\x67\x89\x8b\x4e\x62\xa6\xb4\xe3\x02\xfd\xab\xc8\xe6\x85\x95\x42\xe6\xb6\x8c\x36\xc2\xca\x50\xf5\x05\x7c\xbc\xfb\x95\x40\xcd\x43\x69\xe5\x17\x86\xb0\x87\x94\xb1\x1f\xb5\xbb\xde\x18\x47\x63\xf5\x59\xe8\x80\xc1\xb6\x5b\x7c\xbb\xee\x9a\xd9\xd9\xaa\xc6\x6a\x7d\x16\x44\xf1\x81\x59\x66\xa5\xfe\xe0\x6a\xed\x5f\x23\x11\xb7\x16\x02\xd2\xe7\xe2\xbc\x5f\xac\xdc\x0b\xbb\x2a\xa6\xaf\x7a\x85\x4a\xa8\x5c\x6a\xff\x7a\xfd\x7e\xc2\x71\xe6\x77\xd5\x72\xb0\xe5\xdd\xb5\x46\x45\x77\xaf\xa0\xbf\x73\x1e\x31\x33\x9f\xcf\x74\xbd\xbd\x58\x70\xe3\xca\xd4\x20\xca\xde\xc5\x21\xbf\x9e\x73\x6e\x5f\xf1\x68\x4a\x51\x29\x2f\xff\xb5\xef\x9b\x37\xfb\x6a\x4f\x9e\x9a\xc9\x78\xf1\xc0\xde\xc7\xfb\x66\xf0\x44\xfd\x09\xd1\xe3\xb3\x7d\xbf\x9f\x6b\x6f\xa8\x9a\x7a\x8f\xf0\xf6\xd4\x2c\xfd\xfe\xf7\xdd\x96\xe6\xc6\x2f\x32\x17\x9c\x0b\xe4\x77\xef\x39\x58\x59\xbd\xcb\xaf\xa6\x1d\x3e\x52\x26\x57\x97\x08\x55\x5e\x3d\xd5\x19\xbb\xeb\xbc\xb4\x85\xa9\xa8\xdb\x8a\xad\xa5\x39\xb7\xae\x65\x1b\x19\x83\x6d\xc2\x84\x1d\x96\xeb\x11\x3b\x7d\x27\x0d\x7d\xc8\xd9\x8c\x7e\x6d\x3a\x79\xbe\xbe\x24\x9b\x3b\x92\xbd\x14\xf2\xac\xf0\x8d\xc2\xe4\x00\x4e\xee\xfe\x07\x9b\xaa\xb0\xf1\xc0\xf6\x6f\x09\xbd\x77\x7e\x68\x81\xb8\x37\x63\x6d\xb6\x44\x78\xa0\x66\xdb\x77\x61\xda\x07\xfe\xda\xd6\x0e\xfe\x22\x66\x5b\xc6\x5d\x24\x36\x45\x0a\xb7\x7f\x87\xc4\x01\x59\x8f\x2e\x05\xa5\xfc\xaa\x21\xd8\x3d\x15\x4b\xa7\x5a\xdb\x94\x7b\xf1\x6a\x9a\xed\x2e\xc2\x58\xdc\x33\xa5\x16\x35\x55\xb8\x4d\xb1\xcf\x26\xd1\x76\xbb\x44\x01\xd8\x93\x72\xe8\x64\x3e\x69\x7a\xf0\x7f\xde\xab\xff\x0a\x00\x00\xff\xff\x49\x92\x8c\x6b\x1e\x0f\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 3870, mode: os.FileMode(420), modTime: time.Unix(1554958782, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x10, 0xf7, 0xda, 0x6c, 0x60, 0x31, 0x78, 0x34, 0x0, 0x81, 0x66, 0x8c, 0x4a, 0xc5, 0xb3, 0xae, 0x97, 0x43, 0xca, 0x9a, 0x26, 0x2a, 0xb0, 0xfc, 0xd3, 0x12, 0xfb, 0xb9, 0xf4, 0x8b, 0xdd}}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xdd\x6e\xdb\x3c\x12\x7d\x15\x59\x0b\x08\x22\x42\x53\x76\x5a\xb4\x81\x2d\xba\xd7\x5b\xa0\xe8\x62\xb3\x37\x0b\x41\x28\x68\x6a\x18\x31\xa1\x49\x81\x1c\x39\x1b\x38\x7a\xf7\x05\x25\xcb\x4e\xfa\x83\xef\x0b\x82\x88\x3f\x73\xce\x1c\xce\x0c\x87\x29\x17\x8d\x93\xf8\xd2\x41\xd2\xe2\xc1\xec\xca\xf8\x37\x31\xc2\x3e\xf0\x14\x6c\xba\x2b\x5b\x10\xcd\xae\x3c\x00\x8a\x44\xb6\xc2\x07\x40\x9e\xf6\xa8\x96\x77\x69\xb1\x2b\x8d\xb6\x4f\x89\x07\xc3\xd3\x80\x2f\x06\x42\x0b\x80\x69\xd2\x7a\x50\x3c\x6d\x11\xbb\xb0\x29\x0a\xe5\x2c\x06\xf6\xe0\xdc\x83\x01\xd1\xe9\xc0\xa4\x3b\x14\x5a\x3a\xfb\x45\x89\x83\x36\x2f\xfc\x9b\x40\xf0\x5a\x98\x9b\x7f\x4a\x67\x43\xfa\x8e\xb5\x75\x1e\x65\x8f\x49\xb4\x9f\x89\x0b\x25\x8e\x71\xce\xb4\x74\x51\xc4\xa8\xcd\x8a\x03\xf0\xf4\xa8\xe1\xb9\x73\x1e\xd3\x44\x3a\x8b\x60\x91\xa7\xcf\xba\xc1\x96\x37\x70\xd4\x12\x96\xe3\x84\x6a\xab\x51\x0b\xb3\x0c\x52\x18\xe0\x6b\x1a\x5a\xaf\xed\xd3\x12\xdd\x52\x69\xe4\xf6\x67\x52\x6c\xe1\x00\x4b\xe9\x8c\xf3\x6f\x78\xff\xb1\x1a\x7f\xde\x47\xe1\x20\xac\x56\x10\x2e\x31\x28\xe6\x05\xf6\x18\x9c\x8d\xb6\xa8\xd1\xc0\xee\xdf\xa2\xd1\x2e\xb9\x07\x7f\x04\x5f\x16\xd3\xda\x44\x73\xc6\x05\x14\xa8\x65\x21\x43\x28\x0e\x42\x5b\xf6\xe1\xc3\xe7\xdb\xbd\xf8\xb4\x62\xb2\xed\xed\x13\x93\x21\xa4\xbf\xc4\x7d\x57\x16\x53\xb2\xf6\xae\x79\xd9\x95\xd6\x05\xe9\x75\x87\xbb\xff\xba\x3e\xb1\x00\x4d\x82\x2e\x01\x2b\xf6\x06\x92\xaf\xe2\x28\xee\xc7\xdd\xb8\xe8\x7b\x9b\x60\xab\x43\x22\xba\x8e\x95\xc5\x05\x58\x36\xfa\x98\xe8\x86\xa7\xde\xb9\x91\xbe\xd1\xc7\x5d\x79\xde\x5c\xa8\xde\x4a\xd4\xce\xe6\x86\x9c\xe6\x71\x02\x39\x90\x93\x72\x3e\x3f\x0a\x9f\x78\x8a\xd4\x72\xa8\x56\x35\x75\x1c\xaa\x75\x4d\x7b\x0e\xd5\x6d\x4d\x15\x5f\x51\xcd\xab\x7a\xab\x4a\xcb\x0c\xd8\x07\x6c\xb7\xea\xe6\x86\x20\xb7\x95\xaa\x69\x57\x61\x9d\x65\x9a\x75\x7d\x68\xf3\x38\xa9\x56\x35\x19\x57\xf9\x6a\x1b\xc9\x7d\xa2\x6d\xe2\xc8\xf7\xfd\x23\x48\x64\x9d\x77\xe8\x62\x05\xb3\x56\x84\xef\xcf\xf6\x5f\xde\x75\xe0\xf1\x85\x49\x61\x4c\xee\xa8\x27\x59\x96\x9b\xca\xd7\xdc\x55\xbe\x26\x23\x43\xc8\xb2\x90\x03\xd9\xea\xd9\x3d\xd1\x2c\xb4\x5a\x61\x4e\x72\xb2\xf5\x80\xbd\xb7\x89\x1c\x15\x30\xd1\x75\xe6\x25\x97\xb4\x7f\x7d\xad\x6a\x42\x45\x4e\x86\xcb\x79\x45\x7e\x3d\x2e\x50\xcf\x57\x5b\x5f\xca\x99\xd3\xdf\xdc\x5c\x77\x91\xcb\xca\xd7\xd4\xf2\xc5\x8a\x3a\xbe\xde\xba\x12\x67\x3b\x17\xed\xa2\x4d\xcf\xb1\x72\xf5\x76\xb5\xe0\xbc\xab\xfa\x3a\xcb\x72\xcb\x17\x6b\x32\xd8\x2c\xcb\x25\x0b\x9d\xd1\x12\x72\xbf\x5c\xd2\x35\xa1\xc0\x55\xae\x58\xe0\x18\x83\x43\x86\xb3\x64\x18\x26\x5f\xa7\x81\x76\xfc\xb4\xde\xac\x06\x2a\xc7\x40\xcf\x82\x55\x4c\x90\x56\x39\x56\x50\x93\x33\x28\x8e\x19\xfc\x2f\x5e\x9c\xb0\x1d\x13\xc7\xe3\x12\x3f\xe9\x0d\x50\xb3\x59\xac\xe9\x79\x73\x73\x1a\x86\x39\x38\x26\x82\xc6\x08\xfb\x19\x4b\x3d\xbd\x8e\x15\xa1\x9e\x99\x78\xda\xcb\xda\xa0\xd8\x81\x1b\xaa\x98\xe4\x48\x15\x6b\xf8\xa5\x84\x80\x7a\x8a\xe4\xa4\x98\x8b\x43\xf2\xfa\x7a\x4e\x6d\x03\x4a\x5b\x98\x13\x3a\x9a\x9d\xc0\xf6\x07\xf0\xb1\x8c\x37\x8b\x15\x7d\x00\xdc\xe0\x40\x06\xaa\x98\x7f\xc3\x47\x4e\x69\x6f\x27\x74\x93\x2e\x78\xac\x0e\xa7\x92\xfb\x97\xc3\xde\x99\x2c\x9b\xbe\x0c\xdd\x3d\x7a\x6d\x1f\xfe\x23\x1e\xb2\xec\x4f\x1e\x7f\xb5\xa5\xa7\xa3\x30\x3d\x6c\xd2\x6f\xae\xe9\x0d\xa4\x03\xa1\x7f\x02\xa7\x3f\x7e\x40\x38\x9b\xcd\xb0\xc5\x6a\x92\x8b\x57\xb9\x9e\x4e\x49\x59\x67\x90\x65\xb9\xe7\x2a\xf7\x84\xd0\xbb\x0c\xe6\x0c\xf9\xad\x56\xf9\xc7\xb8\x9b\xba\xd1\x55\xca\xe7\x33\xf9\x2c\x8b\xbf\xec\xea\xe9\x0a\x9a\x6a\xe1\x2c\x4e\x7a\x10\x08\xb9\xed\x8d\x21\x91\x4e\x31\x9f\xe3\x9f\xa4\x23\x4d\x1b\x50\xa2\x37\x98\xfe\x1c\xf1\xe9\x14\x7e\x20\xf4\x76\x14\x14\xc6\xb8\x5c\x83\xec\xc9\x5c\xf2\x36\x5e\x53\x4f\x14\x6b\x72\xa4\x96\xbe\xcd\xce\x2c\xb1\x82\x7a\x60\x7b\x6d\x9b\x51\x17\xb5\xe4\x72\xf9\x30\xc6\xc8\xbe\x4b\xe9\x54\x9a\x90\x65\xf0\xe6\xb4\x5f\x2e\x16\x17\x56\x60\x67\xed\xc3\xe6\x37\x9b\x97\x0a\x8e\xba\x3c\x4d\x45\x4a\x3d\xa1\x3e\xba\x73\xef\x2a\xf2\x02\xf9\x5b\x7d\x26\x02\x22\x47\xc7\xd3\x22\x3d\xdf\xa2\x67\x6d\x1b\xf7\xcc\x9e\x61\xdf\x09\xf9\xf4\x35\x38\xdb\xfd\x6e\x2d\xf6\x15\x6a\xb9\x9f\xda\xcd\x18\x0d\x4f\xb6\xd3\x94\xc7\xae\xe2\x59\x18\xaf\xfe\xd4\xbb\x22\xb7\xe3\xab\xad\x2b\xfd\xdb\x0e\x02\xb9\xaf\x5c\x4d\x46\xd7\x81\xdb\x6d\xec\x53\x79\x55\x93\xb2\x98\xdb\xf9\xf4\x4d\x82\x97\xd7\x17\xe6\x31\x14\xb7\xec\xf6\xc3\x5d\xa3\xf6\x9f\x6e\xcf\xaf\xcb\x63\x7c\x84\xff\x0a\x35\x3e\x4b\x9f\x3f\xab\x8f\x77\x9f\x56\xcd\x6f\x81\xc5\xf4\x0e\x15\xe3\xff\x15\xff\x0f\x00\x00\xff\xff\x55\x86\xf9\x60\x67\x08\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2151, mode: os.FileMode(436), modTime: time.Unix(1554958814, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xe5, 0xec, 0x2, 0xfa, 0x71, 0x4f, 0x4b, 0x80, 0x82, 0x95, 0x33, 0x74, 0x64, 0x6b, 0xeb, 0x50, 0x15, 0xa5, 0xe, 0x7b, 0x21, 0x7d, 0x37, 0xc6, 0x5a, 0xab, 0x56, 0x2c, 0xbd, 0xb2, 0x34}}
	return a, nil
}

var _manifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x3d\x4e\x03\x31\x10\x85\x7b\x9f\xe2\xc9\xb4\x10\xc8\x66\xb5\x45\x3a\xc4\x0d\xa0\x44\x68\x35\x78\x27\x89\x85\xd7\xb6\x6c\x07\x39\x44\xb9\x3b\x1a\x2f\x3f\x99\x62\x8a\xf9\xbe\x79\x7a\x67\x05\xe8\x7c\x08\xa9\x8c\x9e\x66\xd6\x5b\xe8\x67\x26\x53\xf0\x18\xa3\xbe\x15\xf8\x7b\x7e\x4a\x4c\x85\xf1\x47\xf1\x42\x73\x74\xbc\x48\xd6\x04\x9f\xf5\x16\xaf\x0a\x00\xce\x6d\x4b\x70\x32\xf2\xba\xa3\x4f\x11\x56\xd6\x84\xa6\x2f\xcc\x7e\xb1\xbc\xe8\xa1\xaf\x43\x8f\x4d\x57\x37\x1d\xba\xbe\x76\x3d\xd6\x43\x5d\x0f\xff\x66\x39\xc5\xd6\xc0\xce\xb4\xe7\xfb\x7a\x27\x59\xba\xc1\x8b\x02\xde\x5a\x81\x5c\x28\x95\xf1\x98\x9c\x88\xab\xa5\xd4\x64\x73\x74\x74\x92\x4b\x2e\xe4\x27\x72\xc1\xff\xf4\x2d\x07\x9e\x79\x34\xc1\x85\x24\xf8\xe6\xa1\xcd\xc2\xde\xc9\x7c\xec\x53\x38\xfa\xe9\x4a\xd8\xb5\xd1\xea\xa2\xbe\x03\x00\x00\xff\xff\x95\x6e\x9c\x80\x32\x01\x00\x00")

func manifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_manifestJson,
		"manifest.json",
	)
}

func manifestJson() (*asset, error) {
	bytes, err := manifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifest.json", size: 306, mode: os.FileMode(420), modTime: time.Unix(1554958782, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0x67, 0xee, 0xff, 0x85, 0x9e, 0xae, 0xde, 0xec, 0xe4, 0x42, 0xd, 0x54, 0x1e, 0xd2, 0x57, 0x7c, 0x19, 0xff, 0x75, 0x99, 0xc0, 0xfb, 0x70, 0xca, 0x53, 0x68, 0x1f, 0xe2, 0xc, 0xcf, 0x95}}
	return a, nil
}

var _precacheManifest3e43d18400d8b742ae2556b675d737d2Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x4f\x4e\xeb\x30\x10\xc7\xf1\x7d\x4e\x61\x65\x5d\x39\xf1\xbf\x89\xf3\x9e\x38\x02\x27\x40\xa8\x9a\xf1\xd8\xad\x4b\x92\xa2\x38\xad\x90\x10\x9c\x1d\x51\xca\x06\xd1\xd2\xfd\xcc\xe7\xfb\x2b\x71\x48\x72\xbd\x7e\x9e\x63\xc0\xb0\x8d\xf7\x38\xe5\x14\xcb\x22\xee\xc4\x43\x25\xc4\x6b\x25\x84\x10\xf5\x1c\x8f\xb9\xe4\xfd\x54\xff\x13\xb5\x63\xc7\x7d\x8c\x09\x8d\x8a\x2e\x2a\x83\x00\xaa\xe5\x3e\x61\x87\xda\x1b\xa2\x7a\xf5\xf5\x73\x98\x87\xcf\xf3\xa6\x2c\xb8\xe4\xd0\x8c\x91\x33\x36\xc3\x7e\xb3\x97\xdf\x82\x2c\xc7\x4d\x5d\x09\xf1\xb6\xfa\xbd\x94\x38\x85\xc4\xa8\xb9\x27\x45\xc9\x28\x26\xa7\x2f\xe8\xbb\xd2\xcc\x87\x69\xc9\x63\x7c\x1f\x31\x4f\x32\x38\x67\x95\x01\x27\x77\xe5\x5a\x21\x58\x0a\x9e\x90\xc0\x10\x03\x28\xc0\xe8\xd4\xe5\xc2\x49\xee\xba\x64\x3d\xb4\x2c\xc3\xf6\x30\x3d\xfd\xe5\x2b\xd2\x8a\x20\x29\x97\x9c\xf7\xd4\x1a\x0b\x57\x7c\x2d\xb5\xf1\x9c\x08\xf4\x6d\xf8\xed\xe3\x43\x39\xaf\x37\xa6\xd3\x84\xd0\x9e\x03\xa1\x5c\x2d\x58\xdd\xf7\x56\x21\x92\x6d\x01\x30\xb4\xce\x3b\x1d\x52\xc7\xc1\x32\x2a\x65\xcc\xcf\x5a\x9e\x38\xbe\xc8\xed\x32\x0e\x27\xb5\x7a\xfc\xff\x11\x00\x00\xff\xff\xcc\x05\xb0\xea\x5e\x02\x00\x00")

func precacheManifest3e43d18400d8b742ae2556b675d737d2JsBytes() ([]byte, error) {
	return bindataRead(
		_precacheManifest3e43d18400d8b742ae2556b675d737d2Js,
		"precache-manifest.3e43d18400d8b742ae2556b675d737d2.js",
	)
}

func precacheManifest3e43d18400d8b742ae2556b675d737d2Js() (*asset, error) {
	bytes, err := precacheManifest3e43d18400d8b742ae2556b675d737d2JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "precache-manifest.3e43d18400d8b742ae2556b675d737d2.js", size: 606, mode: os.FileMode(436), modTime: time.Unix(1554958814, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0x64, 0xa2, 0xaa, 0xd5, 0xf8, 0x17, 0xb6, 0x70, 0xec, 0x7c, 0x98, 0x3a, 0x2c, 0xcf, 0xce, 0xd7, 0x29, 0xb3, 0x0, 0xd2, 0xbd, 0xbe, 0xcb, 0xf4, 0x8e, 0xd8, 0xf3, 0xd5, 0xcf, 0xf0, 0x18}}
	return a, nil
}

var _serviceWorkerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x6f\x3b\x35\x10\xc5\xef\xfb\x29\x86\x08\xa9\x69\x48\xec\x92\xb4\x4d\x69\xc5\x01\x81\x04\x07\x40\x6d\x52\x14\xa1\x24\xad\xbc\xf6\xec\xae\x89\xd7\xb3\x78\xbc\x4d\xab\x96\xef\x8e\x9c\x6c\x4a\x55\xfe\x39\x45\x8a\xdf\xfc\x66\xe6\xcd\x5b\x39\x18\x64\x30\x80\x05\x3a\x4d\x35\x42\x24\x78\xa1\x36\xc0\x82\xc2\x26\xa7\xe7\x51\x43\x5b\x0c\x68\x80\x31\x3c\x59\x8d\xb0\xa5\xb0\xc1\xf0\x55\x06\xbb\xaa\x3f\xa9\x3d\x71\x0e\x3c\xa2\x49\x95\x01\x4b\xcb\x11\x03\xc4\xca\x32\x14\xd6\x21\x58\xbf\xe7\x6d\x31\x07\xd5\x34\xa0\xbc\x49\x7f\x00\x57\xd4\x3a\x93\x18\xc6\xb2\xca\x1d\xc2\x2f\xf7\xf7\xb7\xa0\x95\xae\xac\x2f\xa1\xa0\x8f\x90\x48\x24\x92\x74\x8e\x08\x55\x8c\x0d\x5f\x4b\x59\x12\x89\xd2\x49\x5f\xdd\x55\x3f\x37\xdd\x38\xf7\x15\x42\x40\x8e\x40\x05\xc4\x0a\x41\x93\x41\xb0\x0c\xaa\x8d\x34\x2a\xd1\x63\x50\x11\x8d\x80\x5b\x87\x8a\x11\x0c\xf9\x93\x08\x6d\x63\x54\xc4\xff\xba\xed\x67\x0a\xa8\xa3\x7b\xb9\x01\xeb\x39\xa2\x32\x43\xa8\xd5\x06\x41\x57\xca\x97\xc8\x9f\x5d\x82\xbc\xb5\xce\x80\x26\x5f\xd8\xb2\x0d\x2a\x5a\xf2\x09\x93\x96\x0d\x38\x0a\x6d\x67\xc2\x5e\xd6\x04\xd2\xc8\x7c\x6c\xa3\xb1\x9a\xfd\xc4\x55\x06\x03\x99\x65\xb6\x6e\x28\xc4\xb9\x0e\xb6\x89\xdc\xef\x1d\x94\x1c\x29\xa8\x12\x45\x49\x54\x3a\x54\x8d\x65\xa1\xa9\x96\xdb\xee\x66\xda\x78\x19\x70\xb7\x23\xcb\x89\xb8\x14\x93\xf7\x27\xde\x8a\xbf\xb8\x77\x7a\xf3\x19\x9d\x01\xf4\x64\x13\x30\xf9\x8f\xa3\x5a\x79\x5b\x20\x47\x31\xc1\xf3\x89\xf9\xf6\xea\xfc\xec\xcc\x5c\xe5\xd3\xf3\xb1\xc2\xf1\xc5\xc5\x65\x7e\x39\xbd\x30\xd3\xc9\xd4\x8c\x13\x2c\x4b\xb4\x8e\x2f\xb4\xb3\xe8\x23\xff\xe8\x94\xad\xfb\xe9\xa1\x8b\x57\xba\x4c\xa7\x99\x2f\xc4\xa1\xd1\x0f\xde\xcc\xa8\x8d\xd8\x3f\x85\x1a\x63\x45\x06\xb0\x28\xac\x4e\x08\xf7\xb2\xcb\x02\x72\x67\x22\x37\xe4\x4d\x32\x3e\xd1\x02\xfe\xdd\x22\x47\xde\xc5\xe4\x8f\xd9\xaf\x9c\x62\x96\x0e\xfe\x3e\xf8\x11\x6f\xe7\xdf\xdd\xcd\x54\xbe\xf3\x96\xd1\x15\xe2\xf1\xf1\x30\xca\x6f\x5d\x25\x7c\x0f\xcb\xb5\xd0\xe4\xb5\x8a\xfd\x63\x9a\xb7\x37\x58\xae\x4f\x6f\xde\xb7\xee\x04\xd6\x97\x82\xdb\xa6\x09\xc8\xbc\x50\xc1\x5b\x5f\x72\xff\xcb\xb2\xff\x39\x70\xa4\xd5\x10\x5e\xff\xf9\xe8\x6f\xa0\x36\xa6\xfa\xc3\x97\xf6\xbb\x7a\xb2\xe5\x2e\x6f\x7b\x4c\x4f\x5a\x6f\xf0\x59\x54\xb1\x76\xbd\x21\xbc\x66\x00\x19\x40\xee\x94\xde\x38\xcb\xf1\x1a\x96\xf2\x61\x25\x1f\xe5\x50\xae\xe4\xf2\x61\x25\xd7\xdf\xac\xc4\xfe\xf7\x6b\xb9\x1e\x66\xa9\xd7\xbf\x01\x00\x00\xff\xff\x63\x9b\xb3\x10\x11\x04\x00\x00")

func serviceWorkerJsBytes() ([]byte, error) {
	return bindataRead(
		_serviceWorkerJs,
		"service-worker.js",
	)
}

func serviceWorkerJs() (*asset, error) {
	bytes, err := serviceWorkerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service-worker.js", size: 1041, mode: os.FileMode(436), modTime: time.Unix(1554958814, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x7a, 0x6a, 0xad, 0x56, 0x93, 0xfe, 0x12, 0xb2, 0x6a, 0x48, 0xd7, 0xd7, 0xe8, 0x51, 0xa5, 0x1c, 0xf1, 0x40, 0xb4, 0xce, 0x86, 0xbe, 0x77, 0xe4, 0x8e, 0x5e, 0x56, 0x70, 0xca, 0x46, 0x4d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"asset-manifest.json": assetManifestJson,

	"favicon.ico": faviconIco,

	"index.html": indexHtml,

	"manifest.json": manifestJson,

	"precache-manifest.3e43d18400d8b742ae2556b675d737d2.js": precacheManifest3e43d18400d8b742ae2556b675d737d2Js,

	"service-worker.js": serviceWorkerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"asset-manifest.json": &bintree{assetManifestJson, map[string]*bintree{}},
	"favicon.ico":         &bintree{faviconIco, map[string]*bintree{}},
	"index.html":          &bintree{indexHtml, map[string]*bintree{}},
	"manifest.json":       &bintree{manifestJson, map[string]*bintree{}},
	"precache-manifest.3e43d18400d8b742ae2556b675d737d2.js": &bintree{precacheManifest3e43d18400d8b742ae2556b675d737d2Js, map[string]*bintree{}},
	"service-worker.js": &bintree{serviceWorkerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
