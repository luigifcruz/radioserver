// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceName int32

const (
	DeviceName_TestSignal  DeviceName = 0
	DeviceName_AirspyMini  DeviceName = 1
	DeviceName_RTLSDR      DeviceName = 2
	DeviceName_LimeSDRMini DeviceName = 3
	DeviceName_LimeSDRUSB  DeviceName = 4
	DeviceName_HackRF      DeviceName = 5
)

var DeviceName_name = map[int32]string{
	0: "TestSignal",
	1: "AirspyMini",
	2: "RTLSDR",
	3: "LimeSDRMini",
	4: "LimeSDRUSB",
	5: "HackRF",
}

var DeviceName_value = map[string]int32{
	"TestSignal":  0,
	"AirspyMini":  1,
	"RTLSDR":      2,
	"LimeSDRMini": 3,
	"LimeSDRUSB":  4,
	"HackRF":      5,
}

func (x DeviceName) String() string {
	return proto.EnumName(DeviceName_name, int32(x))
}

func (DeviceName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

type StatusType int32

const (
	StatusType_Invalid StatusType = 0
	StatusType_OK      StatusType = 1
	StatusType_Error   StatusType = 2
)

var StatusType_name = map[int32]string{
	0: "Invalid",
	1: "OK",
	2: "Error",
}

var StatusType_value = map[string]int32{
	"Invalid": 0,
	"OK":      1,
	"Error":   2,
}

func (x StatusType) String() string {
	return proto.EnumName(StatusType_name, int32(x))
}

func (StatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

type Session struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeviceInfo struct {
	Name                 DeviceName `protobuf:"varint,1,opt,name=Name,proto3,enum=protocol.DeviceName" json:"Name,omitempty"`
	DeviceSerial         string     `protobuf:"bytes,2,opt,name=DeviceSerial,proto3" json:"DeviceSerial,omitempty"`
	MaximumSampleRate    uint32     `protobuf:"varint,3,opt,name=MaximumSampleRate,proto3" json:"MaximumSampleRate,omitempty"`
	MaximumGain          uint32     `protobuf:"varint,4,opt,name=MaximumGain,proto3" json:"MaximumGain,omitempty"`
	MaximumDecimation    uint32     `protobuf:"varint,5,opt,name=MaximumDecimation,proto3" json:"MaximumDecimation,omitempty"`
	MinimumFrequency     uint32     `protobuf:"varint,6,opt,name=MinimumFrequency,proto3" json:"MinimumFrequency,omitempty"`
	MaximumFrequency     uint32     `protobuf:"varint,7,opt,name=MaximumFrequency,proto3" json:"MaximumFrequency,omitempty"`
	ADCResolution        uint32     `protobuf:"varint,8,opt,name=ADCResolution,proto3" json:"ADCResolution,omitempty"`
	MaximumRXChannels    uint32     `protobuf:"varint,9,opt,name=MaximumRXChannels,proto3" json:"MaximumRXChannels,omitempty"`
	MaximumTXChannels    uint32     `protobuf:"varint,10,opt,name=MaximumTXChannels,proto3" json:"MaximumTXChannels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfo.Unmarshal(m, b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return xxx_messageInfo_DeviceInfo.Size(m)
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetName() DeviceName {
	if m != nil {
		return m.Name
	}
	return DeviceName_TestSignal
}

func (m *DeviceInfo) GetDeviceSerial() string {
	if m != nil {
		return m.DeviceSerial
	}
	return ""
}

func (m *DeviceInfo) GetMaximumSampleRate() uint32 {
	if m != nil {
		return m.MaximumSampleRate
	}
	return 0
}

func (m *DeviceInfo) GetMaximumGain() uint32 {
	if m != nil {
		return m.MaximumGain
	}
	return 0
}

func (m *DeviceInfo) GetMaximumDecimation() uint32 {
	if m != nil {
		return m.MaximumDecimation
	}
	return 0
}

func (m *DeviceInfo) GetMinimumFrequency() uint32 {
	if m != nil {
		return m.MinimumFrequency
	}
	return 0
}

func (m *DeviceInfo) GetMaximumFrequency() uint32 {
	if m != nil {
		return m.MaximumFrequency
	}
	return 0
}

func (m *DeviceInfo) GetADCResolution() uint32 {
	if m != nil {
		return m.ADCResolution
	}
	return 0
}

func (m *DeviceInfo) GetMaximumRXChannels() uint32 {
	if m != nil {
		return m.MaximumRXChannels
	}
	return 0
}

func (m *DeviceInfo) GetMaximumTXChannels() uint32 {
	if m != nil {
		return m.MaximumTXChannels
	}
	return 0
}

type DeviceList struct {
	Devices              []*DeviceInfo `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceList) Reset()         { *m = DeviceList{} }
func (m *DeviceList) String() string { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()    {}
func (*DeviceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *DeviceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceList.Unmarshal(m, b)
}
func (m *DeviceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceList.Marshal(b, m, deterministic)
}
func (m *DeviceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceList.Merge(m, src)
}
func (m *DeviceList) XXX_Size() int {
	return xxx_messageInfo_DeviceList.Size(m)
}
func (m *DeviceList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceList proto.InternalMessageInfo

func (m *DeviceList) GetDevices() []*DeviceInfo {
	if m != nil {
		return m.Devices
	}
	return nil
}

type DeviceConfig struct {
	SampleRate           float32        `protobuf:"fixed32,1,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"`
	Oversample           uint32         `protobuf:"varint,2,opt,name=Oversample,proto3" json:"Oversample,omitempty"`
	RXC                  *ChannelConfig `protobuf:"bytes,3,opt,name=RXC,proto3" json:"RXC,omitempty"`
	TXC                  *ChannelConfig `protobuf:"bytes,4,opt,name=TXC,proto3" json:"TXC,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeviceConfig) Reset()         { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()    {}
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *DeviceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceConfig.Unmarshal(m, b)
}
func (m *DeviceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceConfig.Marshal(b, m, deterministic)
}
func (m *DeviceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfig.Merge(m, src)
}
func (m *DeviceConfig) XXX_Size() int {
	return xxx_messageInfo_DeviceConfig.Size(m)
}
func (m *DeviceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfig proto.InternalMessageInfo

func (m *DeviceConfig) GetSampleRate() float32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *DeviceConfig) GetOversample() uint32 {
	if m != nil {
		return m.Oversample
	}
	return 0
}

func (m *DeviceConfig) GetRXC() *ChannelConfig {
	if m != nil {
		return m.RXC
	}
	return nil
}

func (m *DeviceConfig) GetTXC() *ChannelConfig {
	if m != nil {
		return m.TXC
	}
	return nil
}

type DeviceState struct {
	Info                 *DeviceInfo   `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	Config               *DeviceConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceState) Reset()         { *m = DeviceState{} }
func (m *DeviceState) String() string { return proto.CompactTextString(m) }
func (*DeviceState) ProtoMessage()    {}
func (*DeviceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{4}
}

func (m *DeviceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceState.Unmarshal(m, b)
}
func (m *DeviceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceState.Marshal(b, m, deterministic)
}
func (m *DeviceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceState.Merge(m, src)
}
func (m *DeviceState) XXX_Size() int {
	return xxx_messageInfo_DeviceState.Size(m)
}
func (m *DeviceState) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceState.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceState proto.InternalMessageInfo

func (m *DeviceState) GetInfo() *DeviceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DeviceState) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ChannelConfig struct {
	CenterFrequency        float32  `protobuf:"fixed32,1,opt,name=CenterFrequency,proto3" json:"CenterFrequency,omitempty"`
	NormalizedGain         float32  `protobuf:"fixed32,2,opt,name=NormalizedGain,proto3" json:"NormalizedGain,omitempty"`
	AnalogFilterBandwidth  float32  `protobuf:"fixed32,3,opt,name=AnalogFilterBandwidth,proto3" json:"AnalogFilterBandwidth,omitempty"`
	DigitalFilterBandwidth float32  `protobuf:"fixed32,4,opt,name=DigitalFilterBandwidth,proto3" json:"DigitalFilterBandwidth,omitempty"`
	Antenna                string   `protobuf:"bytes,5,opt,name=Antenna,proto3" json:"Antenna,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ChannelConfig) Reset()         { *m = ChannelConfig{} }
func (m *ChannelConfig) String() string { return proto.CompactTextString(m) }
func (*ChannelConfig) ProtoMessage()    {}
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{5}
}

func (m *ChannelConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelConfig.Unmarshal(m, b)
}
func (m *ChannelConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelConfig.Marshal(b, m, deterministic)
}
func (m *ChannelConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelConfig.Merge(m, src)
}
func (m *ChannelConfig) XXX_Size() int {
	return xxx_messageInfo_ChannelConfig.Size(m)
}
func (m *ChannelConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelConfig proto.InternalMessageInfo

func (m *ChannelConfig) GetCenterFrequency() float32 {
	if m != nil {
		return m.CenterFrequency
	}
	return 0
}

func (m *ChannelConfig) GetNormalizedGain() float32 {
	if m != nil {
		return m.NormalizedGain
	}
	return 0
}

func (m *ChannelConfig) GetAnalogFilterBandwidth() float32 {
	if m != nil {
		return m.AnalogFilterBandwidth
	}
	return 0
}

func (m *ChannelConfig) GetDigitalFilterBandwidth() float32 {
	if m != nil {
		return m.DigitalFilterBandwidth
	}
	return 0
}

func (m *ChannelConfig) GetAntenna() string {
	if m != nil {
		return m.Antenna
	}
	return ""
}

type IQData struct {
	Timestamp            uint64     `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Status               StatusType `protobuf:"varint,2,opt,name=status,proto3,enum=protocol.StatusType" json:"status,omitempty"`
	Samples              []float32  `protobuf:"fixed32,4,rep,packed,name=Samples,proto3" json:"Samples,omitempty"`
	Error                string     `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IQData) Reset()         { *m = IQData{} }
func (m *IQData) String() string { return proto.CompactTextString(m) }
func (*IQData) ProtoMessage()    {}
func (*IQData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{6}
}

func (m *IQData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IQData.Unmarshal(m, b)
}
func (m *IQData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IQData.Marshal(b, m, deterministic)
}
func (m *IQData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IQData.Merge(m, src)
}
func (m *IQData) XXX_Size() int {
	return xxx_messageInfo_IQData.Size(m)
}
func (m *IQData) XXX_DiscardUnknown() {
	xxx_messageInfo_IQData.DiscardUnknown(m)
}

var xxx_messageInfo_IQData proto.InternalMessageInfo

func (m *IQData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IQData) GetStatus() StatusType {
	if m != nil {
		return m.Status
	}
	return StatusType_Invalid
}

func (m *IQData) GetSamples() []float32 {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *IQData) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Version struct {
	Major                uint32   `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	Minor                uint32   `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	Hash                 uint32   `protobuf:"varint,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{7}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

type ServerInfoData struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Version              *Version `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerInfoData) Reset()         { *m = ServerInfoData{} }
func (m *ServerInfoData) String() string { return proto.CompactTextString(m) }
func (*ServerInfoData) ProtoMessage()    {}
func (*ServerInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{8}
}

func (m *ServerInfoData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerInfoData.Unmarshal(m, b)
}
func (m *ServerInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerInfoData.Marshal(b, m, deterministic)
}
func (m *ServerInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoData.Merge(m, src)
}
func (m *ServerInfoData) XXX_Size() int {
	return xxx_messageInfo_ServerInfoData.Size(m)
}
func (m *ServerInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoData proto.InternalMessageInfo

func (m *ServerInfoData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerInfoData) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{9}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protocol.DeviceName", DeviceName_name, DeviceName_value)
	proto.RegisterEnum("protocol.StatusType", StatusType_name, StatusType_value)
	proto.RegisterType((*Session)(nil), "protocol.Session")
	proto.RegisterType((*DeviceInfo)(nil), "protocol.DeviceInfo")
	proto.RegisterType((*DeviceList)(nil), "protocol.DeviceList")
	proto.RegisterType((*DeviceConfig)(nil), "protocol.DeviceConfig")
	proto.RegisterType((*DeviceState)(nil), "protocol.DeviceState")
	proto.RegisterType((*ChannelConfig)(nil), "protocol.ChannelConfig")
	proto.RegisterType((*IQData)(nil), "protocol.IQData")
	proto.RegisterType((*Version)(nil), "protocol.Version")
	proto.RegisterType((*ServerInfoData)(nil), "protocol.ServerInfoData")
	proto.RegisterType((*Empty)(nil), "protocol.Empty")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xe1, 0x72, 0xdb, 0x44,
	0x10, 0xae, 0x64, 0xc5, 0xae, 0xd7, 0x75, 0xa2, 0x1e, 0x6d, 0xd1, 0x64, 0x18, 0xf0, 0x68, 0x18,
	0xc6, 0x0d, 0xa9, 0x87, 0x09, 0x50, 0xfe, 0xf0, 0x27, 0xb1, 0x1b, 0xea, 0x21, 0x69, 0x93, 0x93,
	0x60, 0xfc, 0xf7, 0xb0, 0xaf, 0xce, 0x51, 0xe9, 0xce, 0x9c, 0xce, 0x06, 0xf3, 0x9b, 0x47, 0xe1,
	0x09, 0x78, 0x04, 0xde, 0x86, 0xb7, 0x60, 0x6e, 0x25, 0x21, 0xd9, 0x8e, 0xf9, 0x65, 0xef, 0xb7,
	0xdf, 0xed, 0xed, 0xee, 0xb7, 0xb7, 0x82, 0x47, 0x19, 0xd7, 0x2b, 0xae, 0x07, 0x0b, 0xad, 0x8c,
	0x22, 0x0f, 0xf1, 0x67, 0xaa, 0x92, 0xf0, 0x13, 0x68, 0x45, 0x3c, 0xcb, 0x84, 0x92, 0xe4, 0x09,
	0x1c, 0xc4, 0xea, 0x3d, 0x97, 0x81, 0xd3, 0x73, 0xfa, 0x6d, 0x9a, 0x1b, 0xe1, 0x5f, 0x0d, 0x80,
	0x11, 0x5f, 0x89, 0x29, 0x1f, 0xcb, 0x77, 0x8a, 0xf4, 0xc1, 0x7b, 0xc3, 0x52, 0x8e, 0x9c, 0xc3,
	0xb3, 0x27, 0x83, 0x32, 0xd0, 0x20, 0xe7, 0x58, 0x1f, 0x45, 0x06, 0x09, 0xe1, 0x51, 0x8e, 0x45,
	0x5c, 0x0b, 0x96, 0x04, 0x2e, 0x46, 0xdd, 0xc0, 0xc8, 0x29, 0x3c, 0xbe, 0x66, 0xbf, 0x89, 0x74,
	0x99, 0x46, 0x2c, 0x5d, 0x24, 0x9c, 0x32, 0xc3, 0x83, 0x46, 0xcf, 0xe9, 0x77, 0xe9, 0xae, 0x83,
	0xf4, 0xa0, 0x53, 0x80, 0xdf, 0x31, 0x21, 0x03, 0x0f, 0x79, 0x75, 0xa8, 0x16, 0x6f, 0xc4, 0xa7,
	0x22, 0x65, 0x46, 0x28, 0x19, 0x1c, 0x6c, 0xc4, 0xab, 0x1c, 0xe4, 0x04, 0xfc, 0x6b, 0x21, 0x2d,
	0x78, 0xa9, 0xf9, 0x2f, 0x4b, 0x2e, 0xa7, 0xeb, 0xa0, 0x89, 0xe4, 0x1d, 0x1c, 0xb9, 0x79, 0x80,
	0x8a, 0xdb, 0x2a, 0xb8, 0x5b, 0x38, 0xf9, 0x14, 0xba, 0xe7, 0xa3, 0x21, 0xe5, 0x99, 0x4a, 0x96,
	0x98, 0xc1, 0x43, 0x24, 0x6e, 0x82, 0xb5, 0x5c, 0xe9, 0x64, 0x78, 0xc7, 0xa4, 0xe4, 0x49, 0x16,
	0xb4, 0x37, 0x72, 0xad, 0x1c, 0x35, 0x76, 0x5c, 0xb1, 0x61, 0x83, 0x5d, 0x39, 0xc2, 0x6f, 0x4b,
	0xcd, 0xae, 0x44, 0x66, 0xc8, 0x00, 0x5a, 0xb9, 0x95, 0x05, 0x4e, 0xaf, 0xd1, 0xef, 0xec, 0xca,
	0x66, 0xa5, 0xa5, 0x25, 0x29, 0xfc, 0xd3, 0x29, 0xa5, 0x1b, 0x2a, 0xf9, 0x4e, 0xcc, 0xc9, 0xc7,
	0x00, 0x35, 0x7d, 0xac, 0xf4, 0x2e, 0xad, 0x21, 0xd6, 0xff, 0x76, 0xc5, 0x75, 0x86, 0x08, 0x0a,
	0xdd, 0xa5, 0x35, 0x84, 0x3c, 0x87, 0x06, 0x9d, 0x0c, 0x51, 0xd8, 0xce, 0xd9, 0x87, 0xd5, 0xe5,
	0x45, 0xbe, 0xf9, 0x2d, 0xd4, 0x72, 0x2c, 0x35, 0x9e, 0x0c, 0x51, 0xdb, 0xff, 0xa3, 0xc6, 0x93,
	0x61, 0x38, 0x87, 0x4e, 0x31, 0x4c, 0xc6, 0x26, 0xd1, 0x07, 0xcf, 0x96, 0x81, 0xe9, 0xed, 0x2b,
	0x11, 0x19, 0x64, 0x00, 0xcd, 0x3c, 0x0e, 0xa6, 0xda, 0x39, 0x7b, 0xb6, 0xcd, 0x2d, 0x6e, 0x29,
	0x58, 0xe1, 0x3f, 0x0e, 0x74, 0x37, 0xee, 0x27, 0x7d, 0x38, 0x1a, 0x72, 0x69, 0xb8, 0xae, 0x86,
	0x21, 0xef, 0xca, 0x36, 0x4c, 0x3e, 0x83, 0xc3, 0x37, 0x4a, 0xa7, 0x2c, 0x11, 0xbf, 0xf3, 0x19,
	0x8e, 0xad, 0x8b, 0xc4, 0x2d, 0x94, 0x7c, 0x05, 0x4f, 0xcf, 0x25, 0x4b, 0xd4, 0xfc, 0x52, 0x24,
	0x86, 0xeb, 0x0b, 0x26, 0x67, 0xbf, 0x8a, 0x99, 0xb9, 0xc3, 0xa6, 0xb9, 0xf4, 0x7e, 0x27, 0x79,
	0x09, 0xcf, 0x46, 0x62, 0x2e, 0x0c, 0x4b, 0xb6, 0x8f, 0x79, 0x78, 0x6c, 0x8f, 0x97, 0x04, 0xd0,
	0x3a, 0x97, 0x86, 0x4b, 0xc9, 0xf0, 0x75, 0xb4, 0x69, 0x69, 0x86, 0x7f, 0x38, 0xd0, 0x1c, 0xdf,
	0x8e, 0x98, 0x61, 0xe4, 0x23, 0x68, 0xc7, 0x22, 0xe5, 0x99, 0x61, 0xe9, 0x02, 0xcb, 0xf3, 0x68,
	0x05, 0x90, 0x53, 0x68, 0x66, 0x86, 0x99, 0x65, 0x86, 0x05, 0x6d, 0xac, 0x82, 0x08, 0xf1, 0x78,
	0xbd, 0xe0, 0xb4, 0xe0, 0xd8, 0x0b, 0xf3, 0x79, 0xc9, 0x02, 0xaf, 0xd7, 0xe8, 0xbb, 0xb4, 0x34,
	0xed, 0xd6, 0x79, 0xa5, 0xb5, 0xd2, 0x58, 0x68, 0x9b, 0xe6, 0x46, 0x38, 0x86, 0xd6, 0x8f, 0x5c,
	0x97, 0x6b, 0xe9, 0x9a, 0xfd, 0xac, 0x34, 0xa6, 0xd0, 0xa5, 0xb9, 0x81, 0xa8, 0x90, 0x4a, 0x17,
	0xd3, 0x96, 0x1b, 0x84, 0x80, 0xf7, 0x9a, 0x65, 0x77, 0xc5, 0x0a, 0xc1, 0xff, 0xe1, 0x2d, 0x1c,
	0x46, 0xb8, 0xfb, 0xac, 0xf6, 0x58, 0x18, 0xa9, 0xed, 0xb0, 0x76, 0xb1, 0xad, 0x3e, 0xff, 0xef,
	0xc2, 0x62, 0x28, 0x1e, 0x57, 0xf5, 0x14, 0x0e, 0x5a, 0x32, 0xc2, 0x16, 0x1c, 0xbc, 0x4a, 0x17,
	0x66, 0x7d, 0xc2, 0xcb, 0x77, 0x86, 0x31, 0x0e, 0x01, 0x62, 0x9e, 0x99, 0x48, 0xcc, 0x25, 0x4b,
	0xfc, 0x07, 0xd6, 0x3e, 0x17, 0x3a, 0x5b, 0xac, 0xed, 0x36, 0xf1, 0x1d, 0x02, 0xd0, 0xa4, 0xf1,
	0x55, 0x34, 0xa2, 0xbe, 0x4b, 0x8e, 0xa0, 0x73, 0x25, 0x52, 0x1e, 0x8d, 0x28, 0x3a, 0x1b, 0x96,
	0x5c, 0x00, 0x3f, 0x44, 0x17, 0xbe, 0x67, 0xc9, 0xaf, 0xd9, 0xf4, 0x3d, 0xbd, 0xf4, 0x0f, 0x4e,
	0x4e, 0x01, 0xaa, 0x9e, 0x92, 0x0e, 0xb4, 0xc6, 0x72, 0xc5, 0x12, 0x31, 0xf3, 0x1f, 0x90, 0x26,
	0xb8, 0x6f, 0xbf, 0xf7, 0x1d, 0xd2, 0x2e, 0xda, 0xe8, 0xbb, 0x67, 0x7f, 0xbb, 0xd0, 0xa1, 0x6c,
	0x26, 0x54, 0x5e, 0x36, 0x79, 0x01, 0x1e, 0xae, 0x81, 0xa3, 0xaa, 0x22, 0xcc, 0xfe, 0x78, 0xe7,
	0x8d, 0x20, 0xed, 0x6b, 0x68, 0xdf, 0x68, 0xb5, 0x12, 0xd8, 0xfc, 0xa7, 0xdb, 0x14, 0x7c, 0x6b,
	0xc7, 0xb5, 0xe6, 0x94, 0x5f, 0x8f, 0x17, 0x76, 0xc9, 0x64, 0x46, 0xab, 0x35, 0xd9, 0xf5, 0x1e,
	0x6f, 0xdf, 0x4d, 0xbe, 0x01, 0xa8, 0x54, 0xd9, 0x4d, 0x2d, 0xa8, 0x87, 0xd8, 0x10, 0xef, 0x25,
	0x78, 0xf1, 0x52, 0x72, 0xb2, 0xe7, 0xd1, 0x1e, 0xef, 0xc1, 0x6d, 0x17, 0xe8, 0x64, 0x7c, 0x7b,
	0x5f, 0x72, 0x7e, 0x05, 0xe5, 0xa3, 0xff, 0x85, 0x73, 0xf1, 0x1c, 0x3e, 0x10, 0x6a, 0x30, 0xd7,
	0x8b, 0xe9, 0x40, 0xdb, 0x5e, 0xe6, 0x9f, 0xcf, 0x0b, 0xbf, 0xd6, 0xd8, 0x1b, 0x7b, 0xe8, 0xc6,
	0xf9, 0xa9, 0x89, 0xa7, 0xbf, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x54, 0xa9, 0x72, 0xb0, 0x63,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RadioServerClient is the client API for RadioServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RadioServerClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error)
	Provision(ctx context.Context, in *DeviceState, opts ...grpc.CallOption) (*Session, error)
	Destroy(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error)
	ServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfoData, error)
	Tune(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*DeviceConfig, error)
	RXIQ(ctx context.Context, in *Session, opts ...grpc.CallOption) (RadioServer_RXIQClient, error)
}

type radioServerClient struct {
	cc *grpc.ClientConn
}

func NewRadioServerClient(cc *grpc.ClientConn) RadioServerClient {
	return &radioServerClient{cc}
}

func (c *radioServerClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := c.cc.Invoke(ctx, "/protocol.RadioServer/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServerClient) Provision(ctx context.Context, in *DeviceState, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protocol.RadioServer/Provision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServerClient) Destroy(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protocol.RadioServer/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServerClient) ServerInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfoData, error) {
	out := new(ServerInfoData)
	err := c.cc.Invoke(ctx, "/protocol.RadioServer/ServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServerClient) Tune(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*DeviceConfig, error) {
	out := new(DeviceConfig)
	err := c.cc.Invoke(ctx, "/protocol.RadioServer/Tune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServerClient) RXIQ(ctx context.Context, in *Session, opts ...grpc.CallOption) (RadioServer_RXIQClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RadioServer_serviceDesc.Streams[0], "/protocol.RadioServer/RXIQ", opts...)
	if err != nil {
		return nil, err
	}
	x := &radioServerRXIQClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RadioServer_RXIQClient interface {
	Recv() (*IQData, error)
	grpc.ClientStream
}

type radioServerRXIQClient struct {
	grpc.ClientStream
}

func (x *radioServerRXIQClient) Recv() (*IQData, error) {
	m := new(IQData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RadioServerServer is the server API for RadioServer service.
type RadioServerServer interface {
	List(context.Context, *Empty) (*DeviceList, error)
	Provision(context.Context, *DeviceState) (*Session, error)
	Destroy(context.Context, *Session) (*Empty, error)
	ServerInfo(context.Context, *Empty) (*ServerInfoData, error)
	Tune(context.Context, *DeviceConfig) (*DeviceConfig, error)
	RXIQ(*Session, RadioServer_RXIQServer) error
}

// UnimplementedRadioServerServer can be embedded to have forward compatible implementations.
type UnimplementedRadioServerServer struct {
}

func (*UnimplementedRadioServerServer) List(ctx context.Context, req *Empty) (*DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRadioServerServer) Provision(ctx context.Context, req *DeviceState) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}
func (*UnimplementedRadioServerServer) Destroy(ctx context.Context, req *Session) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedRadioServerServer) ServerInfo(ctx context.Context, req *Empty) (*ServerInfoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInfo not implemented")
}
func (*UnimplementedRadioServerServer) Tune(ctx context.Context, req *DeviceConfig) (*DeviceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tune not implemented")
}
func (*UnimplementedRadioServerServer) RXIQ(req *Session, srv RadioServer_RXIQServer) error {
	return status.Errorf(codes.Unimplemented, "method RXIQ not implemented")
}

func RegisterRadioServerServer(s *grpc.Server, srv RadioServerServer) {
	s.RegisterService(&_RadioServer_serviceDesc, srv)
}

func _RadioServer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RadioServer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServerServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioServer_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServerServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RadioServer/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServerServer).Provision(ctx, req.(*DeviceState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioServer_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RadioServer/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServerServer).Destroy(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioServer_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServerServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RadioServer/ServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServerServer).ServerInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioServer_Tune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServerServer).Tune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RadioServer/Tune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServerServer).Tune(ctx, req.(*DeviceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioServer_RXIQ_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RadioServerServer).RXIQ(m, &radioServerRXIQServer{stream})
}

type RadioServer_RXIQServer interface {
	Send(*IQData) error
	grpc.ServerStream
}

type radioServerRXIQServer struct {
	grpc.ServerStream
}

func (x *radioServerRXIQServer) Send(m *IQData) error {
	return x.ServerStream.SendMsg(m)
}

var _RadioServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.RadioServer",
	HandlerType: (*RadioServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RadioServer_List_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _RadioServer_Provision_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _RadioServer_Destroy_Handler,
		},
		{
			MethodName: "ServerInfo",
			Handler:    _RadioServer_ServerInfo_Handler,
		},
		{
			MethodName: "Tune",
			Handler:    _RadioServer_Tune_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RXIQ",
			Handler:       _RadioServer_RXIQ_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
