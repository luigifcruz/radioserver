syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.radioserver";
option java_outer_classname = "RadioServerProto";

package protocol;

enum DeviceName {
    TestSignal = 0;
    AirspyMini = 1;
    RTLSDR = 2;
    LimeSDRMini = 3;
    LimeSDRUSB = 4;
    HackRF = 5;
}

message Session {
    string Token = 1;
}

message DeviceInfo {
    DeviceName Name = 1;
    string Serial = 2;
    uint32 MaximumSampleRate = 3;
    uint32 MinimumFrequency = 6;
    uint32 MaximumFrequency = 7;
    uint32 ADCResolution = 8;
    uint32 MaximumRXChannels = 9;
    uint32 MaximumTXChannels = 10;
}

message DeviceList {
    repeated DeviceInfo Devices = 1;
}

message DeviceConfig {
    float SampleRate = 1;
    uint32 Oversample = 2;
    repeated ChannelConfig RXC = 3;
    repeated ChannelConfig TXC = 4;
}

message DeviceState {
    DeviceInfo Info = 1;
    DeviceConfig Config = 2;
}

message DeviceTune {
    Session Session = 1;
    DeviceConfig Config = 2;
}

message ChannelConfig {
    float CenterFrequency = 1;
    float NormalizedGain = 2;
    float AnalogFilterBandwidth = 3;
    float DigitalFilterBandwidth = 4;
    string Antenna = 5;
}

enum StatusType {
    Invalid  = 0;
    OK = 1;
    Error = 2;
}

message IQData {
    uint64 Timestamp = 1;
    StatusType status = 2;
    repeated float Samples = 4;
    string Error = 3;
}

//
//  Meta
//

message Version {
    uint32 Major = 1;
    uint32 Minor = 2;
    uint32 Hash = 3;
}

message ServerInfoData {
    string Name = 1;
    Version Version = 2;
}

//
//  RadioServer Methods 
//

message Empty {}

service RadioServer {
    rpc List(Empty) returns (DeviceList);
    rpc Provision(DeviceState) returns (Session);
    rpc Destroy(Session) returns (Empty);
    rpc ServerInfo(Empty) returns (ServerInfoData);
    rpc Tune(DeviceTune) returns (DeviceConfig);
    rpc RXIQ(Session) returns (stream IQData);
}
