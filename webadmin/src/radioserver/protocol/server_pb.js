/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-ignore
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protocol.ByeReturn', null, global);
goog.exportSymbol('proto.protocol.ChannelConfig', null, global);
goog.exportSymbol('proto.protocol.ChannelType', null, global);
goog.exportSymbol('proto.protocol.DeviceInfo', null, global);
goog.exportSymbol('proto.protocol.DeviceType', null, global);
goog.exportSymbol('proto.protocol.Empty', null, global);
goog.exportSymbol('proto.protocol.FrequencyChannelConfig', null, global);
goog.exportSymbol('proto.protocol.HelloData', null, global);
goog.exportSymbol('proto.protocol.HelloReturn', null, global);
goog.exportSymbol('proto.protocol.IQData', null, global);
goog.exportSymbol('proto.protocol.LoginData', null, global);
goog.exportSymbol('proto.protocol.MeData', null, global);
goog.exportSymbol('proto.protocol.PingData', null, global);
goog.exportSymbol('proto.protocol.ServerInfoData', null, global);
goog.exportSymbol('proto.protocol.StatusType', null, global);
goog.exportSymbol('proto.protocol.VersionData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.LoginData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.LoginData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.LoginData.displayName = 'proto.protocol.LoginData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.LoginData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.LoginData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.LoginData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LoginData.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.LoginData}
 */
proto.protocol.LoginData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.LoginData;
  return proto.protocol.LoginData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.LoginData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.LoginData}
 */
proto.protocol.LoginData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.LoginData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.LoginData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.LoginData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.LoginData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Token = 1;
 * @return {string}
 */
proto.protocol.LoginData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.LoginData.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.IQData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.IQData.repeatedFields_, null);
};
goog.inherits(proto.protocol.IQData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.IQData.displayName = 'proto.protocol.IQData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.IQData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.IQData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.IQData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.IQData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.IQData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    samplesList: jspb.Message.getRepeatedFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.IQData}
 */
proto.protocol.IQData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.IQData;
  return proto.protocol.IQData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.IQData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.IQData}
 */
proto.protocol.IQData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!proto.protocol.StatusType} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = /** @type {!proto.protocol.ChannelType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSamplesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.IQData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.IQData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.IQData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.IQData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.protocol.IQData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.IQData.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional StatusType status = 2;
 * @return {!proto.protocol.StatusType}
 */
proto.protocol.IQData.prototype.getStatus = function() {
  return /** @type {!proto.protocol.StatusType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.protocol.StatusType} value */
proto.protocol.IQData.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.protocol.IQData.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.IQData.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ChannelType Type = 4;
 * @return {!proto.protocol.ChannelType}
 */
proto.protocol.IQData.prototype.getType = function() {
  return /** @type {!proto.protocol.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.protocol.ChannelType} value */
proto.protocol.IQData.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated float Samples = 5;
 * @return {!Array<number>}
 */
proto.protocol.IQData.prototype.getSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.protocol.IQData.prototype.setSamplesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protocol.IQData.prototype.addSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.protocol.IQData.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ChannelConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ChannelConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ChannelConfig.displayName = 'proto.protocol.ChannelConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ChannelConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ChannelConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ChannelConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ChannelConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    logininfo: (f = msg.getLogininfo()) && proto.protocol.LoginData.toObject(includeInstance, f),
    centerfrequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decimationstage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ChannelConfig}
 */
proto.protocol.ChannelConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ChannelConfig;
  return proto.protocol.ChannelConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ChannelConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ChannelConfig}
 */
proto.protocol.ChannelConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.LoginData;
      reader.readMessage(value,proto.protocol.LoginData.deserializeBinaryFromReader);
      msg.setLogininfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCenterfrequency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimationstage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ChannelConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ChannelConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ChannelConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ChannelConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogininfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.LoginData.serializeBinaryToWriter
    );
  }
  f = message.getCenterfrequency();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDecimationstage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional LoginData LoginInfo = 1;
 * @return {?proto.protocol.LoginData}
 */
proto.protocol.ChannelConfig.prototype.getLogininfo = function() {
  return /** @type{?proto.protocol.LoginData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.LoginData, 1));
};


/** @param {?proto.protocol.LoginData|undefined} value */
proto.protocol.ChannelConfig.prototype.setLogininfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.ChannelConfig.prototype.clearLogininfo = function() {
  this.setLogininfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ChannelConfig.prototype.hasLogininfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 CenterFrequency = 2;
 * @return {number}
 */
proto.protocol.ChannelConfig.prototype.getCenterfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ChannelConfig.prototype.setCenterfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 DecimationStage = 3;
 * @return {number}
 */
proto.protocol.ChannelConfig.prototype.getDecimationstage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ChannelConfig.prototype.setDecimationstage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.FrequencyChannelConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.FrequencyChannelConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.FrequencyChannelConfig.displayName = 'proto.protocol.FrequencyChannelConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.FrequencyChannelConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.FrequencyChannelConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.FrequencyChannelConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.FrequencyChannelConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    logininfo: (f = msg.getLogininfo()) && proto.protocol.LoginData.toObject(includeInstance, f),
    centerfrequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decimationstage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    length: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.FrequencyChannelConfig}
 */
proto.protocol.FrequencyChannelConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.FrequencyChannelConfig;
  return proto.protocol.FrequencyChannelConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.FrequencyChannelConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.FrequencyChannelConfig}
 */
proto.protocol.FrequencyChannelConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.LoginData;
      reader.readMessage(value,proto.protocol.LoginData.deserializeBinaryFromReader);
      msg.setLogininfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCenterfrequency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimationstage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.FrequencyChannelConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.FrequencyChannelConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.FrequencyChannelConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.FrequencyChannelConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogininfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.LoginData.serializeBinaryToWriter
    );
  }
  f = message.getCenterfrequency();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDecimationstage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional LoginData LoginInfo = 1;
 * @return {?proto.protocol.LoginData}
 */
proto.protocol.FrequencyChannelConfig.prototype.getLogininfo = function() {
  return /** @type{?proto.protocol.LoginData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.LoginData, 1));
};


/** @param {?proto.protocol.LoginData|undefined} value */
proto.protocol.FrequencyChannelConfig.prototype.setLogininfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.protocol.FrequencyChannelConfig.prototype.clearLogininfo = function() {
  this.setLogininfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.FrequencyChannelConfig.prototype.hasLogininfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 CenterFrequency = 2;
 * @return {number}
 */
proto.protocol.FrequencyChannelConfig.prototype.getCenterfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.FrequencyChannelConfig.prototype.setCenterfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 DecimationStage = 3;
 * @return {number}
 */
proto.protocol.FrequencyChannelConfig.prototype.getDecimationstage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.FrequencyChannelConfig.prototype.setDecimationstage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 Length = 4;
 * @return {number}
 */
proto.protocol.FrequencyChannelConfig.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.FrequencyChannelConfig.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.Empty.displayName = 'proto.protocol.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Empty}
 */
proto.protocol.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Empty;
  return proto.protocol.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Empty}
 */
proto.protocol.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.PingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.PingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.PingData.displayName = 'proto.protocol.PingData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.PingData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.PingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.PingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.PingData}
 */
proto.protocol.PingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.PingData;
  return proto.protocol.PingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.PingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.PingData}
 */
proto.protocol.PingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.PingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.PingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.PingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.PingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.protocol.PingData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.PingData.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.protocol.PingData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.PingData.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.HelloData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.HelloData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.HelloData.displayName = 'proto.protocol.HelloData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.HelloData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.HelloData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.HelloData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.HelloData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    application: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.HelloData}
 */
proto.protocol.HelloData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.HelloData;
  return proto.protocol.HelloData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.HelloData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.HelloData}
 */
proto.protocol.HelloData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplication(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.HelloData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.HelloData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.HelloData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.HelloData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApplication();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.protocol.HelloData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.HelloData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Application = 2;
 * @return {string}
 */
proto.protocol.HelloData.prototype.getApplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.HelloData.prototype.setApplication = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Username = 3;
 * @return {string}
 */
proto.protocol.HelloData.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.HelloData.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Password = 4;
 * @return {string}
 */
proto.protocol.HelloData.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.HelloData.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.HelloReturn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.HelloReturn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.HelloReturn.displayName = 'proto.protocol.HelloReturn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.HelloReturn.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.HelloReturn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.HelloReturn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.HelloReturn.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    login: (f = msg.getLogin()) && proto.protocol.LoginData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.HelloReturn}
 */
proto.protocol.HelloReturn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.HelloReturn;
  return proto.protocol.HelloReturn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.HelloReturn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.HelloReturn}
 */
proto.protocol.HelloReturn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.StatusType} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.protocol.LoginData;
      reader.readMessage(value,proto.protocol.LoginData.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.HelloReturn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.HelloReturn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.HelloReturn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.HelloReturn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.LoginData.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusType Status = 1;
 * @return {!proto.protocol.StatusType}
 */
proto.protocol.HelloReturn.prototype.getStatus = function() {
  return /** @type {!proto.protocol.StatusType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.StatusType} value */
proto.protocol.HelloReturn.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional LoginData Login = 2;
 * @return {?proto.protocol.LoginData}
 */
proto.protocol.HelloReturn.prototype.getLogin = function() {
  return /** @type{?proto.protocol.LoginData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.LoginData, 2));
};


/** @param {?proto.protocol.LoginData|undefined} value */
proto.protocol.HelloReturn.prototype.setLogin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protocol.HelloReturn.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.HelloReturn.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.VersionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.VersionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.VersionData.displayName = 'proto.protocol.VersionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.VersionData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.VersionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.VersionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.VersionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.VersionData}
 */
proto.protocol.VersionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.VersionData;
  return proto.protocol.VersionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.VersionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.VersionData}
 */
proto.protocol.VersionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.VersionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.VersionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.VersionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.VersionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHash();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 Major = 1;
 * @return {number}
 */
proto.protocol.VersionData.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.VersionData.prototype.setMajor = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Minor = 2;
 * @return {number}
 */
proto.protocol.VersionData.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.VersionData.prototype.setMinor = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Hash = 3;
 * @return {number}
 */
proto.protocol.VersionData.prototype.getHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.VersionData.prototype.setHash = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.DeviceInfo.displayName = 'proto.protocol.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceserial: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    maximumsamplerate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maximumgain: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maximumdecimation: jspb.Message.getFieldWithDefault(msg, 6, 0),
    minimumfrequency: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maximumfrequency: jspb.Message.getFieldWithDefault(msg, 8, 0),
    adcresolution: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.DeviceInfo}
 */
proto.protocol.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.DeviceInfo;
  return proto.protocol.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.DeviceInfo}
 */
proto.protocol.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protocol.DeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceserial(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumsamplerate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumgain(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumdecimation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumfrequency(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumfrequency(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdcresolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeviceserial();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaximumsamplerate();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaximumgain();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaximumdecimation();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMinimumfrequency();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getMaximumfrequency();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAdcresolution();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional DeviceType DeviceType = 1;
 * @return {!proto.protocol.DeviceType}
 */
proto.protocol.DeviceInfo.prototype.getDevicetype = function() {
  return /** @type {!proto.protocol.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protocol.DeviceType} value */
proto.protocol.DeviceInfo.prototype.setDevicetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string DeviceSerial = 2;
 * @return {string}
 */
proto.protocol.DeviceInfo.prototype.getDeviceserial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.DeviceInfo.prototype.setDeviceserial = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DeviceName = 3;
 * @return {string}
 */
proto.protocol.DeviceInfo.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.DeviceInfo.prototype.setDevicename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 MaximumSampleRate = 4;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getMaximumsamplerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setMaximumsamplerate = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 MaximumGain = 5;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getMaximumgain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setMaximumgain = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 MaximumDecimation = 6;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getMaximumdecimation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setMaximumdecimation = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 MinimumFrequency = 7;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getMinimumfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setMinimumfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 MaximumFrequency = 8;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getMaximumfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setMaximumfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 ADCResolution = 9;
 * @return {number}
 */
proto.protocol.DeviceInfo.prototype.getAdcresolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.DeviceInfo.prototype.setAdcresolution = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ServerInfoData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ServerInfoData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ServerInfoData.displayName = 'proto.protocol.ServerInfoData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ServerInfoData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ServerInfoData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ServerInfoData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ServerInfoData.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlallowed: jspb.Message.getFieldWithDefault(msg, 1, false),
    servercenterfrequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minimumiqcenterfrequency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumiqcenterfrequency: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minimumsmartfrequency: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maximumsmartfrequency: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deviceinfo: (f = msg.getDeviceinfo()) && proto.protocol.DeviceInfo.toObject(includeInstance, f),
    version: (f = msg.getVersion()) && proto.protocol.VersionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ServerInfoData}
 */
proto.protocol.ServerInfoData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ServerInfoData;
  return proto.protocol.ServerInfoData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ServerInfoData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ServerInfoData}
 */
proto.protocol.ServerInfoData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setControlallowed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServercenterfrequency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumiqcenterfrequency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumiqcenterfrequency(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumsmartfrequency(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumsmartfrequency(value);
      break;
    case 7:
      var value = new proto.protocol.DeviceInfo;
      reader.readMessage(value,proto.protocol.DeviceInfo.deserializeBinaryFromReader);
      msg.setDeviceinfo(value);
      break;
    case 8:
      var value = new proto.protocol.VersionData;
      reader.readMessage(value,proto.protocol.VersionData.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ServerInfoData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ServerInfoData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ServerInfoData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ServerInfoData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlallowed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServercenterfrequency();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinimumiqcenterfrequency();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaximumiqcenterfrequency();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMinimumsmartfrequency();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaximumsmartfrequency();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDeviceinfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protocol.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protocol.VersionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool ControlAllowed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.ServerInfoData.prototype.getControlallowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.protocol.ServerInfoData.prototype.setControlallowed = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 ServerCenterFrequency = 2;
 * @return {number}
 */
proto.protocol.ServerInfoData.prototype.getServercenterfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.ServerInfoData.prototype.setServercenterfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 MinimumIQCenterFrequency = 3;
 * @return {number}
 */
proto.protocol.ServerInfoData.prototype.getMinimumiqcenterfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.ServerInfoData.prototype.setMinimumiqcenterfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 MaximumIQCenterFrequency = 4;
 * @return {number}
 */
proto.protocol.ServerInfoData.prototype.getMaximumiqcenterfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.ServerInfoData.prototype.setMaximumiqcenterfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 MinimumSmartFrequency = 5;
 * @return {number}
 */
proto.protocol.ServerInfoData.prototype.getMinimumsmartfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.ServerInfoData.prototype.setMinimumsmartfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 MaximumSmartFrequency = 6;
 * @return {number}
 */
proto.protocol.ServerInfoData.prototype.getMaximumsmartfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.ServerInfoData.prototype.setMaximumsmartfrequency = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional DeviceInfo deviceInfo = 7;
 * @return {?proto.protocol.DeviceInfo}
 */
proto.protocol.ServerInfoData.prototype.getDeviceinfo = function() {
  return /** @type{?proto.protocol.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, proto.protocol.DeviceInfo, 7));
};


/** @param {?proto.protocol.DeviceInfo|undefined} value */
proto.protocol.ServerInfoData.prototype.setDeviceinfo = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.protocol.ServerInfoData.prototype.clearDeviceinfo = function() {
  this.setDeviceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ServerInfoData.prototype.hasDeviceinfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VersionData version = 8;
 * @return {?proto.protocol.VersionData}
 */
proto.protocol.ServerInfoData.prototype.getVersion = function() {
  return /** @type{?proto.protocol.VersionData} */ (
    jspb.Message.getWrapperField(this, proto.protocol.VersionData, 8));
};


/** @param {?proto.protocol.VersionData|undefined} value */
proto.protocol.ServerInfoData.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.protocol.ServerInfoData.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protocol.ServerInfoData.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.MeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.MeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.MeData.displayName = 'proto.protocol.MeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.MeData.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.MeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.MeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.MeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    application: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    controlallowed: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.MeData}
 */
proto.protocol.MeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.MeData;
  return proto.protocol.MeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.MeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.MeData}
 */
proto.protocol.MeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplication(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setControlallowed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.MeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.MeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.MeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.MeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApplication();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getControlallowed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.protocol.MeData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.MeData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Application = 2;
 * @return {string}
 */
proto.protocol.MeData.prototype.getApplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.MeData.prototype.setApplication = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Username = 3;
 * @return {string}
 */
proto.protocol.MeData.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.MeData.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Address = 4;
 * @return {string}
 */
proto.protocol.MeData.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.MeData.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool ControlAllowed = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protocol.MeData.prototype.getControlallowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.protocol.MeData.prototype.setControlallowed = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ByeReturn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.ByeReturn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protocol.ByeReturn.displayName = 'proto.protocol.ByeReturn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ByeReturn.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ByeReturn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ByeReturn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ByeReturn.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ByeReturn}
 */
proto.protocol.ByeReturn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ByeReturn;
  return proto.protocol.ByeReturn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ByeReturn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ByeReturn}
 */
proto.protocol.ByeReturn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ByeReturn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ByeReturn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ByeReturn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ByeReturn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.protocol.ByeReturn.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.ByeReturn.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.protocol.StatusType = {
  INVALID: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @enum {number}
 */
proto.protocol.ChannelType = {
  IQ: 0,
  SMARTIQ: 1,
  FREQUENCY: 2
};

/**
 * @enum {number}
 */
proto.protocol.DeviceType = {
  DEVICEINVALID: 0,
  DEVICETESTSIGNAL: 1,
  DEVICEAIRSPYONE: 2,
  DEVICEAIRSPYHF: 3,
  DEVICERTLSDR: 4,
  DEVICELIMESDRUSB: 5,
  DEVICELIMESDRMINI: 6,
  DEVICESPYSERVER: 7,
  DEVICEHACKRF: 8
};

goog.object.extend(exports, proto.protocol);
